性能指标：
1.带宽，表示链路的最大传输速率，单位通常为b/s(比特/s)
2.吞吐量，表示单位时间内成功传输的数据量，单位通常为b/s(比特/s)或者B/s(字节/秒)。吞吐量受带宽限制，而吞吐量/带宽，也就是改网络的使用率
3.延时，表示从网络请求发出后，一直到收到远端响应，所需要的时间延迟。在不同场景中，这一指标可能会有不通含义，比如，它可以表示，建立连接需要的时间（比如TCP握手延时），或一个数据包往返所需的时间（比如RTT）
4.PPS，是packet per second second(包/秒)的缩写，表示以网络包为单位的传输速率，PPS通常用来评估网络的转发能力，比如硬件交换机，通常可以达到线性转发（即PPS可以达到或者接近理论最大值），而基于Linux服务器的转发，则容易受网络包大小的影响

除了上述指标外：网络的可用性(网络能否正常通信)、并发链接数(TCP链接数量)、丢包率（丢包百分比）、重传率（重新传输的网络包比例）等也是常用的性能指标



网络配置：
分析网络问题的第一步，通常是查看网络接口的配置和状态，可以使用ifconfig或者ip命令来查看网络配置
ifconfig和ip分别属于软件包net-tools和iproute2, iproute2是net-tools的下一代
$ ifconfig eth0
eth0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST> mtu 1500
      inet 10.240.0.30 netmask 255.240.0.0 broadcast 10.255.255.255
      inet6 fe80::20d:3aff:fe07:cf2a prefixlen 64 scopeid 0x20<link>
      ether 78:0d:3a:07:cf:3a txqueuelen 1000 (Ethernet)
      RX packets 40809142 bytes 9542369803 (9.5 GB)
      RX errors 0 dropped 0 overruns 0 frame 0
      TX packets 32637401 bytes 4815573306 (4.8 GB)
      TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0
​
$ ip -s addr show dev eth0
2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000
  link/ether 78:0d:3a:07:cf:3a brd ff:ff:ff:ff:ff:ff
  inet 10.240.0.30/12 brd 10.255.255.255 scope global eth0
      valid_lft forever preferred_lft forever
  inet6 fe80::20d:3aff:fe07:cf2a/64 scope link
      valid_lft forever preferred_lft forever
  RX: bytes packets errors dropped overrun mcast
   9542432350 40809397 0       0       0       193
  TX: bytes packets errors dropped carrier collsns
   4815625265 32637658 0       0       0       0

ifconfig和ip命令输出的指标基本相同，只是显示格式略微不同。比如，它们都包括了网络接口的状态标志、MTU大小、IP、子网、MAC地址以及网络包收发的统计信息

需关注的参数:
1. 网络接口的状态标志。
ifconfig输出中的RUNNING，或者ip输出中的LOWER_UP,都表示物理网络都是连通的，即网卡已经连接到了交换机或者路由器中。如果看不到它们，通常表示网线被拔掉了
2. MTU的大小
MTU默认大小是1500，根据网络架构的不同(比如是否使用了VXLAN等叠加网络),你可能需要跳大或者调小MTU的数值
3. 网络接口的Ip地址、子网以及MAC地址。
这些都是保障网络功能正常工作所必需的，需要确保配置正确
4.网络收发的字节数、包数、错误数以及丢包情况，特别是TX和RX部分的errors、dropped、overruns、carrier以及collisions等指标不为0时，通常表示网络I/O问题
1) errors表示发生错误的数据包数，比如校验错误、帧同步错误等
2) dropped表示丢弃的数据包数，即数据包已经收到Ring Buffer，但因为内存不足等原因丢包
3) overruns表示超限数据包数，即网络I/O速度过快，导致Ring Buffer中数据包来不及处理（队列满）而导致的丢包
4) carrier表示发生carrier错误的数据包数，比如双工模式不匹配、物理电缆出现问题等；
5) collisions表示碰撞数据包数



套接字信息:
ifconfig和ip只显示了网络接口收发数据包的统计信息，但在实际的性能问题中，网络协议栈中的统计信息，可以使用netstat或者ss来查看套接字、网络栈、网络接口以及路由表的信息
# head -n 3 表示只显示前面 3 行
# -l 表示只显示监听套接字
# -n 表示显示数字地址和端口 (而不是名字)
# -p 表示显示进程信息
$ netstat -nlp | head -n 3
Active Internet connections (only servers)
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
tcp        0      0 127.0.0.53:53           0.0.0.0:*               LISTEN      840/systemd-resolve

# -l 表示只显示监听套接字
# -t 表示只显示 TCP 套接字
# -n 表示显示数字地址和端口 (而不是名字)
# -p 表示显示进程信息
$ ss -ltnp | head -n 3
State    Recv-Q    Send-Q        Local Address:Port        Peer Address:Port
LISTEN   0         128           127.0.0.53%lo:53               0.0.0.0:*        users:(("systemd-resolve",pid=840,fd=13))
LISTEN   0         128                 0.0.0.0:22               0.0.0.0:*        users:(("sshd",pid=1459,fd=3))

netstat和ss的输出是类似的，都展示了套接字的状态、接收队列、发送队列、本地地址、远程地址、进程PID和进程名称等等
其中，接收队列(Recv-Q)和发送队列(Send-Q)需要你特别关注，它们通常应该是0。当你发现它们不是0时，说明有网络包的堆积发生。当然还要注意，在不同套接字状态下它们的含义不同

1) 当套接字处于连接状态(Established)时：
Recv-Q表示套接字缓冲还没有被应用程序取走的字节数(即接收丢列长度)
Send-Q表示还没有被远端主机确认的字节数(即发送队列长度)

2) 当套接字处于监听状态(Listening)时：
Recv-Q表示syn backlog的当前值
Send-Q表示最大的syn backlog值

而syn backlog是TCP协议栈中的半连接队列长度，相应的也有一个全连接队列(accept queue),它们都是维护TCP状态的重要机制

半连接：就是还没有完成TCP三次握手的链接，链接只进行了一半，而服务器收到了客户端的SYN包后，就会把这个链接放到半连接队列中，然后再向客户端发送SYN+ACK包

全连接: 则是指服务器收到了客户端的ACK，完成了TCP三次握手，然后就会把这个连接挪到全连接队列中，这些全连接中的套接字，还需要再被accept()系统调用取走，这样服务器就可以开始真正处理客户端的请求了



协议栈统计信息:
使用netstat或者ss来查看协议栈信息
$ netstat -s
...
Tcp:
    3244906 active connection openings
    23143 passive connection openings
    115732 failed connection attempts
    2964 connection resets received
    1 connections established
    13025010 segments received
    17606946 segments sent out
    44438 segments retransmitted
    42 bad segments received
    5315 resets sent
    InCsumErrors: 42
...

$ ss -s
Total: 186 (kernel 1446)
TCP:   4 (estab 1, closed 0, orphaned 0, synrecv 0, timewait 0/0), ports 0

Transport Total     IP        IPv6
*	  1446      -         -
RAW	  2         1         1
UDP	  2         2         0
TCP	  4         3         1
...

这些协议栈的统计信息都很直观，ss只显示已经连接、关闭、孤儿套接字等简要统计，而netstat则提供的是更详细的网络协议栈信息
上述输出展示了TCP协议的主动连接、被动连接、失败重试、发送和接收的分段数量等各种信息



网络吞吐和PPS：
查看
# 数字 1 表示每隔 1 秒输出一组数据
$ sar -n DEV 1
Linux 4.15.0-1035-azure (ubuntu) 	01/06/19 	_x86_64_	(2 CPU)

13:21:40        IFACE   rxpck/s   txpck/s    rxkB/s    txkB/s   rxcmp/s   txcmp/s  rxmcst/s   %ifutil
13:21:41         eth0     18.00     20.00      5.79      4.25      0.00      0.00      0.00      0.00
13:21:41      docker0      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00
13:21:41           lo      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00
1) rxpck/s和txpck/s分别是接收和发送的PPS，单位为包/秒
2) rxKB/s和txKB/s分别是接收和发送的吞吐量，单位是KB/秒 
3) rxcmp/s和txcmp/s分别是接收和发送的压缩数据包数，单位是包/秒
4) %ifutil是网络接口的使用率，即半双工模式下为(rxKB/s+txKB/s)/Bandwidth,而全双工模式下为max(rxKB/s,txKB/s)/Bandwidth 
其中Bandwidth可以用ethtool来查询，它的单位通常是Gb/s或者Mb/s，不过注意这里小写字母b，表示比特而不是字节。我们通常提到的千兆网卡、万兆网卡等，单位也都是比特
$ ethtool eth0 | grep Speed
	Speed: 1000Mb/s
上述表示是千兆网卡



连通性和延时
最后，我们通常使用ping，来测试远程主机的连通性和延时，而这基于ICMP协议。
# -c3 表示发送三次 ICMP 包后停止
$ ping -c3 114.114.114.114
PING 114.114.114.114 (114.114.114.114) 56(84) bytes of data.
64 bytes from 114.114.114.114: icmp_seq=1 ttl=54 time=244 ms
64 bytes from 114.114.114.114: icmp_seq=2 ttl=47 time=244 ms
64 bytes from 114.114.114.114: icmp_seq=3 ttl=67 time=244 ms

--- 114.114.114.114 ping statistics ---
3 packets transmitted, 3 received, 0% packet loss, time 2001ms
rtt min/avg/max/mdev = 244.023/244.070/244.105/0.034 ms

ping的输出，可以分为两部分:
第一部分，是每个ICMP请求的信息，包括ICMP序列号(icmp_seq)、TTL(生存时间，或者跳数)以及往返延时
第二部分，则是三次ICMP请求的汇总

比如上面输出显示，发送了3个网络包，并且接收到3个响应，没有丢包发送，这说明测试主机打破114.114.114.114是连通的；平均往返延时(RTT)是244ms，也就是从发送ICMP开始，到接收到114.114.114.114回复确认，总共经历了244ms







