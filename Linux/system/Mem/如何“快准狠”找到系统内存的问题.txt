内存性能指标：
1.已用内存和剩余内存很容易理解，就是已经使用和还未使用的内存

2.共享内存是通过tmpfs实现的，所以它的大小也就是tmpfs使用的内存大小。tmpfs其实也是一种特殊的缓存

3.可用内存是新进程可以使用的最大内存，它包括剩余内存和可回收缓存

4.缓存包括两部分，一部分是磁盘读取文件的页缓存，用来缓存从磁盘读取的数据，可以加快以后再次访问的速度。另一部分，则是Slab分配器中的可回收内存

5.缓冲区是对原始磁盘块的临时存储，用来缓存将要写入磁盘的数据。这样，内核就可以把分散的写集中起来，统一优化磁盘写入

6.虚拟内存，包括了进程的代码段，数据段，共享内存，已经申请的堆内存和已经换出的内存等。这里要注意的，已经申请的内存，即使还没有分配物理内存，也算作虚拟内存

7.常驻内存是进程实际使用的物理内存，不过，它不包括Swap和共享内存

8.共享内存，既包括与其他进程共同使用的共享内存，还包含了加载的动态链接库以及程序的代码段等

9.swap内存，是通过swap换出到磁盘的额内存

10.缺页异常，分为两种；1.可以直接从物理内存中分配时，被称为次缺页异常  2.需要I/O介入（比如Swap）时，被称为主缺页异常；  显然主缺页异常升高，就意味着需要磁盘I/O,那么内存访问也会慢很多



当通过free发现大部分内存都被缓存占用后，可以使用vmstat或者sar观察一下缓存的变化趋势，确认缓存的使用是否还在继续增大；；如果继续增大，则说明导致缓存升高的进程还在进行，那就能用缓存/缓冲区分析工具（比如cachetop、slabtop等），分析这些缓存到底被哪里占用


当free一下，发现系统可用内存不足时，首先要确认内存是否被缓存/缓冲区占用。排除缓存/缓冲区后，可以继续使用pidstat或者top定位占用内存最多的进程;;找出进程后，再通过进程内存空间工具(比如pmap)，分
析进程地址空间中内存的使用情况就可以


当通过vmstat或者sar发现内存在不断增长后，可以分析中是否存在泄漏的问题;;比如可以使用内存分配分析工具memleak，检查是否存在内存泄漏。如果存在内存泄漏问题，memleak会为你输出内存泄漏的进程以及调用堆栈


常见的优化思路：
1.最好禁止swap。如果必须开启swap，降低swappiness的值，减少内存回收时swap的使用倾向

2.减少内存的动态分配。比如，可以使用内存池、大页(HugePage)等

3.尽量使用缓存和缓冲区来访问数据。比如，可以使用堆栈明确声明内存空间，来储存需要缓存的数据；或者用redis这类的外部缓存组件，优化数据的访问

4.使用cgroups等方式限制进程的内存使用情况，这样，可以确保系统内存不会被异常进程耗尽

5.通过/proc/pid/oom_adj,调整核心应用的oom_score。这样，可以保证即使内存紧张，核心应用也不会被OOM杀死









