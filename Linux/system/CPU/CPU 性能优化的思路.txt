优化之前需要考虑如下几个方面：
1.优化后能提升多少性能
2.性能问题一般不是独立的，如果有多个性能问题同时发生，应该先优化哪一个？
3.提升性能的办法并不是唯一的，当有多种方法可以选择时，应该选择哪一种？是不是选哪个最大程度提升性能的方法？

若可以回答则可以立即优化：
例子：
上面所使用的iowait高的例子，通过性能分析，我们发现是因为一个进程的直接I/O,导致了iowait高达90%。那是不是用"直接I/O换成缓存I/O"的方法，就可以立即优化了呢？
按照上面需要思考的三点来确定是不是可以立即优化：
1) 第一个问题，直接I/O换成缓存I/O,可以把iowait从90%降到接近0.性能提升很明显
2) 第二个问题，我们没有发现其他性能问题，直接I/O是唯一的性能瓶颈，所以不用挑选优化对象
3) 第三个问题，缓存I/O是我们目前用到的最简单的优化方法，而且这样优化并不会影响应用的功能

综上所述，这三个问题很容易就能回答，所以立即优化没有任何问题





怎么评估性能优化的效果：
我们解决性能问题的目的，自然是想得到一个性能提升的效果。为了评估这个效果，我们需要对系统的性能指标进行量化，并且要分别测试出优化前、后的性能指标，用前后指标的变化来对比呈现效果：
性能评估三步走：
1.确定性能的量化指标
2.测试优化前的性能指标
3.测试优化后的性能指标

性能的量化指标有很多，比如cpu使用率、应用程序的吞吐量、客户端请求的延迟等，都可以评估性能

建议不要局限在单一维度的指标上，至少要从应用程序和系统资源这两个维度，分别选择不同的指标。
以web应用为例：
1.应用程序的维度，我们可以用吞吐量和请求延迟来评估应用程序的性能
2.系统资源的维度，我们可以用cpu使用率来评估系统的cpu使用情况

之所以从这两个不同的维度选择指标，主要是因为应用程序和系统资源这两者间相辅相成的关系

3.好的应用程序是性能优化的最终目的和结果，系统优化总是为应用程序服务的。所以必须要使用应用程序的指标来评估性能优化的整体效果

4.系统资源的使用情况是影响应用程序性能的根源。所以。需要用系统资源的指标，来观察和分析瓶颈的来源

至于接下来的两个步骤，主要是为了对比优化前后的性能，更直观地呈现效果。如果你的第一步，是从两个不同维度选择了多个指标，那么在性能测试时，就需要获得这些指标的具体数值：
还是以web应用为例。对应上面提到的几个指标，可以选择ab等工具，测试web应用的并发请求数和响应延迟。而测试的同时，还可以用vmstat、pidstat等性能工具，观察系统和进程cpu使用率。
这样，我们就同时获得了应用程序和系统资源两个维度的指标数量

不过，在进行性能测试时，有两个特别重要的地方需要注意：
1)要避免性能测试工具干扰应用程序的性能。通常。对web应用来说，性能测试工具跟目标应用程序要在不同的机器上运行
比如，在之前的nginx案例中，我每次都会强调要两台虚拟机，其中一台运行nginx服务，而另一台运行模拟客户端的工具，就是为了避免这个影响

2)避免外部环境的变化影响性能指标的评估。这要求优化前、后的应用程序，都运行在相同配置的机器上。并且它们的外部依赖也要完全一致



测试领域的二八原则：
也就是80%的问题都是有20%的代码导致的。只要找出这20%的位置，就可以优化80%的性能，所以并不是所有的性能问题都值得优化


第一,如果发现是系统资源达到了瓶颈，比如cpu使用率达到了100%，那么首先优化的一定是系统资源使用问题。完成系统资源瓶颈的优化后，我们才要考虑其他问题
第二，针对不同类型的指标，首先去优化那些由瓶颈导致的，性能指标变化幅度最大的问题。比如产生瓶颈后，用户cpu使用率升高了10%，而系统cpu使用率却高了50%，这个时候就应该首先优化系统cpu的使用


有多种方法优化时，要如何选择？
CPU优化：
1) 应用程序优化
1. 编译器优化，很多编译器都会提供优化选项，适当开启它们，在编译阶段你就可以获得编译器的帮助，来提升性能。比如。gcc就提供了优化选项-O2，开启后会自动对应用程序的代码进行优化
2. 算法优化。使用复杂度更低的算法，可以显著加快处理速度。比如，在数据比较大的情况下，可以用O(nlogn)的排序算法(如快排、归并排序等)，代替O(n^2)的排序算法(如冒泡、插入、排序等)
3. 异步处理。 使用异步处理，可以避免程序因为等待某个资源而一直阻塞，从而提升程序的并发处理能力。比如，把轮询替换为事件通知，就可以避免轮询耗费cpu的问题
4. 多线程代替多进程。 相对于进程的上下文切换。线程的上下文切换并不切换进程地址空间，因此可以降低上下文切换的成本
5. 善用缓存。 经常访问的数据或者计算过程中的步骤，可以放到内存中缓存起来，这样在下次用时就能直接从内存中获取，加快程序的处理速度


2) 系统优化：
从系统的角度来说，优化cpu的运行，一方面要充分利用cpu缓存的本地性，加快缓存访问；另一方面，就是要控制进程的cpu使用情况，减少进程间的相互影响
1. CPU绑定：把进程绑定到一个或者多个cpu上，可以提高cpu缓存的命中率，减少跨cpu调度带来的上下文切换问题
2. CPU独占：跟CPU绑定类似，进一步将CPU分组，并通过cpu亲和性机制为其分配进程。这样，这样cpu就由指定的进程独占，换句话说，不允许其他进程来使用这些cpu
3. 优先级调整： 使用nice调整进程的优先级，正值调低优先级，负值调高优先级。适当降低非核心应用的优先级，增高核心应用的优先级，可以确保核心应用得到优先处理
4. 为进程设置资源限制： 使用Linux cgroups来设置进程的CPU使用上限，可以防止由于某个应用自身的问题，而耗尽系统资源
5. NUMA(Non-Uniform Memory Access)优化：支持NUMA的处理器会被划分为多个node。每个node都有自己的本地内存空间。NUMA优化，其实就是让cpu尽可能只访问本地内存
6. 中断负载均衡： 无论是软中断还是硬中断，它们的中断处理程序都可能会耗费大量的cpu。开启irqbalance服务或者配置smp_affinity，就可以把中断处理过程自动负载均衡到多个cpu上

++++++++++++++++++++++++++++++++++++
第一：服务简介
这个服务是专门做中断服务指令的！
能在系统层次保证多核CPU的合理分配！

第二：安装方法
#yum -y install glib2-devel
#yum -y install irqbalance 
# /etc/init.d/irqbalance start
注意：如果报错
正在启动 irqbalance：irqbalance: symbol lookup error: irqbalance: undefined symbol: g_list_free_full
这个就是没有安装glib2-devel引起的；


第三：优缺点分析：
优点：既可以提升性能，又可以降低能耗。
原理：irqbalance 优化中断分配，它会自动收集系统数据以分析使用模式，并依据系统负载状况将工作状态置于 Performance mode 或 Power-save mode。
觉得绕口的话，就是多个马拉一辆车，车夫就是irqbalance！

缺点:
由于irqbalance选用自己的算法，多线程服务时，会有潜在的分配失败问题，由此造成性能的不稳定！


第四：选取标准：
主要由系统所承载的硬件和所负载的软件来决定！
举例：
一台配置一般的文件服务器完全可以开启irqbalance 服务；
一台配置很优的Oracle数据库服务器完全不需要开启此服务（Oracle自身有调度器，irqbalance 本身也消耗资源，最终要的，必须注意第三步提出的缺点）

++++++++++++++++++++++++++++++++++++==

千万避免过早优化
过早优化时万恶之源







