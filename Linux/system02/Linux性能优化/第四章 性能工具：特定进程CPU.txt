4.1进程性能统计信息
4.1.1. 内核时间VS用户时间
一个应用程序所耗时间最基本的划分是内核时间与用户时间。内核时间是消耗在Linux内核上的时间，而用户时间则是消耗在应用程序或库代码上的时间。Linux有工具，如time和ps，可以（大致）表明应用程序将其时间花费在应用程序代码上还是话费在内核代码上。

4.1.2 库时间VS应用程序时间
任何应用程序，即便其复杂性非常低，也需要依赖系统库才能执行复杂的操作。这些库可能导致性能问题，因此，能够查看应用程序在某个库中花费了多少时间很重要了。在库被应用程序使用时，ltrace命令和oprofile工具包提供了分析库性能的途径。Linux加载器ld的内置工具帮助你确定使用多少个库是否会减慢应用程序的启动时间。

4.2工具
4.2.1 time
time命令完成一项基本功能，当需要测试一条命令的性能时，通常会首先运行它。time命令如同秒表一样，可以测量命令执行的时间。

[root@prometheus ~]# time ps
   PID TTY          TIME CMD
  1575 pts/0    00:00:00 bash
  2528 pts/0    00:00:00 ps

real	0m0.016s
user	0m0.005s
sys	0m0.011s



4.2.2 strace
starce是当程序执行时，追踪其发起的系统调用工具。系统调用是由或代表一个应用程序进行的Linux内核函数调用。strace可以展示准确的系统调用，它在确定应用程序是如何使用Linux内核方面是相当有用的。在分析大型程序或你完全不懂的程序时，跟踪系统调用的频率和长度是特别有价值的。通过查看strace的输出，你可以了解应用程序如何使用内核，以及它依赖什么类型的函数。strace [-c] [-p pid] [-o file] [--help] [command   [arg …]]

-c	打印出统计信息的概要，而非所有系统调用的独立列表
-p pid	将给定PID添加到进程，并开始跟踪
-o file	输出保存到file文件里面


与CPU相关的strace输出
%time	对全部系统调用的总时间来说，该项为这一个系统调用所花时间的百分比
second	这一个系统调用所花费的总秒数
calls	这个类型的所有调用的总数

[root@prometheus ~]# strace -c ps
   PID TTY          TIME CMD
  1575 pts/0    00:00:00 bash
  2532 pts/0    00:00:00 strace
  2534 pts/0    00:00:00 ps
% time     seconds  usecs/call     calls    errors syscall
------ ----------- ----------- --------- --------- ----------------
 41.93    0.003552          10       362           read
 19.29    0.001634           4       374        12 open
 10.71    0.000907           2       363           close
  6.89    0.000584           8        71           mmap
  6.72    0.000569           3       180         8 stat
  6.42    0.000544          12        45           mprotect
  2.51    0.000213         107         2           getdents
  1.45    0.000123           4        29           fstat
  0.92    0.000078           3        24           rt_sigaction
  0.85    0.000072          12         6           munmap
  0.58    0.000049          16         3           readlink
  0.34    0.000029          10         3         2 access
  0.25    0.000021          11         2         2 statfs
  0.21    0.000018           5         4           write
  0.19    0.000016           5         3           brk
  0.14    0.000012           6         2           ioctl
  0.09    0.000008           4         2           lseek
  0.07    0.000006           6         1           execve
  0.07    0.000006           6         1           openat
  0.06    0.000005           5         1           set_tid_address
  0.05    0.000004           4         1           rt_sigprocmask
  0.05    0.000004           4         1           uname
  0.05    0.000004           4         1           getrlimit
  0.05    0.000004           4         1           arch_prctl
  0.05    0.000004           4         1           set_robust_list
  0.04    0.000003           3         1           geteuid
  0.02    0.000002           2         1           futex
------ ----------- ----------- --------- --------- ----------------
100.00    0.008471                  1485        24 total


4.2.3 ltrace
ltrace与strace的概念相似，但它跟踪的是应用程序对库的调用而不是对内核的调用。虽然ltrace主要用于提供对库调用的参数和返回值的精确跟踪，但是你也可以用它来汇总每个调用所花的时间。这使得你既可以发现应用程序有哪些调用，又可以发现每个调用时间是多长。


[root@prometheus ~]# ltrace -c ps
   PID TTY          TIME CMD
  1575 pts/0    00:00:00 bash
  2542 pts/0    00:00:00 ltrace
  2543 pts/0    00:00:00 ps
% time     seconds  usecs/call     calls      function
------ ----------- ----------- --------- --------------------
 51.24    0.054455       54455         1 __libc_start_main
 32.57    0.034613         209       165 readproc
  2.48    0.002641         528         5 bsearch
  2.26    0.002402         150        16 fwrite
  2.03    0.002157          98        22 sigaction
  1.65    0.001749          79        22 strlen
  1.55    0.001644          78        21 strcmp
  0.68    0.000721          80         9 getenv
  0.55    0.000581          96         6 __snprintf_chk
  0.48    0.000513         171         3 dev_to_tty
  0.40    0.000424          84         5 __strdup
  0.39    0.000414         138         3 escape_command
  0.27    0.000288          72         4 strcpy
  0.27    0.000288          72         4 strcasecmp
  0.26    0.000281          70         4 malloc
  0.26    0.000281         281         1 dcgettext
  0.17    0.000182          91         2 fclose
  0.16    0.000171         171         1 setlocale
  0.16    0.000170         170         1 mmap
  0.15    0.000164          82         2 ferror
  0.15    0.000157         157         1 exit_group
  0.14    0.000154         154         1 look_up_our_self
  0.14    0.000154         154         1 meminfo
  0.13    0.000143         143         1 openproc
  0.13    0.000142          71         2 __fpending
  0.13    0.000140         140         1 uptime
  0.12    0.000131         131         1 mprotect
  0.12    0.000127         127         1 time
  0.11    0.000118         118         1 get_pid_digits
  0.09    0.000091          91         1 closeproc
  0.08    0.000087          87         1 ioctl
  0.08    0.000087          87         1 isatty
  0.08    0.000084          84         1 geteuid
  0.08    0.000083          83         1 __cxa_atexit
  0.08    0.000081          81         1 strrchr
  0.07    0.000075          75         1 bindtextdomain
  0.07    0.000073          73         1 __strncpy_chk
  0.07    0.000072          72         1 textdomain
  0.07    0.000071          71         1 getpagesize
  0.07    0.000071          71         1 sigfillset
------ ----------- ----------- --------- --------------------
100.00    0.106280                   318 total



4.2.4 ps（进程状态）
ps能给出运行进程的详细的静态和动态统计信息。ps提供静态信息包括命令名和PID，动态信息保存内存和CPU的当前使用情况。 

etime	统计信息：经过时间是指从程序开始执行耗费的总的时间
time	统计信息：CPU时间是指进程运行于CPU所话费的系统时间加上用户时间
pcpu	统计信息：进程当前消耗的CPU百分比
cmd	统计信息：命令名 


[root@prometheus ~]# ps -o etime,time,pcpu,cmd 1026
    ELAPSED     TIME %CPU CMD
   05:54:01 00:00:01  0.0 /usr/sbin/httpd -DFOREGROUND