在线故障：
1.意料之外的错误、无响应或者响应缓慢
2.服务中，影响用户体验
3.不能停机或者大面积停机
4.需要尽快恢复


应对思路：
1.根据经验来分析，如果应急团队中有人对相应的问题有经验,并能确定能够通过某种手段恢复系统的正常运行，那么应该第一时间恢复（回滚等），同时务必要保留现场，以备后续对问题的定位和恢复；如果没有人有经验，则需要使用比较粗暴的办法保证服务可用，如定时重启、限流、降级等。

2.业务负责人、技术负责人、核心研发人员、架构师、运维工程师以及运营人员对问题的原因进行快速分析，分析的过程需要首先考虑系统近期的变化，包括如下方面：
1)系统最近是否进行了发布上线工作
2)服务的使用方是否有运营活动
3)网络是否有流量的波动
4)最近的业务量是否上升
5)运营人员是否在系统上做了变动
6)依赖的基础平台和资源是否进行发布上线
7)依赖的其他系统是否进行了发布上线


可能的原因分析：
1.代码Bug：逻辑不严谨、连接未释放
2.代码性能：循环外部调用、未使用批量读取、正则循环等
3.内存泄漏：本地缓存
4.异常流量/攻击：DDOS
5.业务量提升：容量预估失误
6.外部系统问题：数据库、搜索引擎、分布式缓存、消息队列等中间件的性能问题"CPU/内存/IO指标异常"



常用系统诊断工具：
1.uptime:系统的运行时间、平均负载，包括1分钟、5分钟、15分钟内可以运行的任务平均数量，包括正在运行的任务、虽然可以运行但正在等待某个处理器空闲以及阻塞在不可中断休眠状态的进程（等待IO，状态为D）的任务

2.dmesg |tail: 该命令会输出系统日志的最后10行。常见的OOM kill和TCP丢包在这里都会有记录
常用：https://linux.cn/article-3587-1.html

3.vmstat1：实时性能检测工具，可以展现给定时间间隔的服务器的状态值，包括服务器的CPU使用率、内存使用、虚拟内存交换情况、IO读写情况等系统核心指标。
r: 等待CPU资源的进程数，这个比平均负载load更能体现CPU的繁忙状况
b：阻塞在不可用中断休眠状态的进程数
si、so、swap区的使用情况，如果不为0说明已经开始使用swap区
us、sy、id、wa、st、CPU使用状况：id + us + sy = 100

4.free -m: 该命令可以查看系统内存的使用情况，
-m参数表示按照兆字节表示。
Buffer和Cache都被计算在了used里面，真正反映内存使用状况的是第二行，如果可用内存较少，会使用swap区，增加IO开销，降低性能；同时会导致CPU飙升；导致宕机

5.top：包含了系统全局的很多指标信息，包括系统负载情况、系统内存使用情况、系统CPU使用情况等等，基本涵盖了上述几条命令的功能

6.netstat -antp: 查看TCP网络连接状况   a:all   t：TCP P:pid   n：listen？



sysstat工具的使用：
yum -y install sysstat 
mpstat -P ALL 1：该命令用来显示每个CPU的使用情况，如果有一个CPU占用率特别高，说明有可能是一个单线程应用程序引起的

sar -n DEV 1: sar命令主要用来查看网络设备的吞吐率，可以通过网络设备的吞吐量，判断网络设备是否已经饱和

sar -n TCP,ETCP 1：查看TCP连接状态，
active/s，每秒主动发起的连接数目[connect]:
passive/s,每秒被动发起的连接数目(accept)
retrans/s,每秒重传的数量，能够反映网络状况是否发生了丢包

iostat -xz 1: 查看机器磁盘IO情况
await(ms), IO操作的平均等待时间，是应用程序在和磁盘交互时，需要消耗的时间，包括IO等待和实际操作的耗时
avgqu-s，向设备发出的平均请求数量
%util,设备使用率



JDK诊断工具：
1. jstack: java堆栈根据工具，主要用于打印指定的java进程、核心文件或远程调试服务器的java线程的堆栈跟踪信息
2. jmap: java内存映射工具（java memory map），主要用于打印指定java进程、核心文件或远程调试服务器的共享对象内存映射或堆内存细节
3. jhat：java堆分析工具（java Heap Analysis Tool）,用于分析java堆内存中的对象信息
4. jinfo: java配置信息工具（java Configuration information）,主要用于打印指定java进程、核心文件或远程调式服务器的配置信息，也可以动态修改JVM参数配置
5. jstat：JVM统计检测工具（JVM statistics Monitorting Tool）,主要用于监测并显示JVM的性能统计信息，包括gc统计信息
6. jcmd： java命令行（java command）,用于向正在运行的JVM发送诊断命令请求。由于jmap官方标注的时unsupported,jcmd可以作为其替代工具
等等太多





分析思路：
1. 根据日志输出的异常信息定位问题，需要区分tomcat中的catalina.out(标准输出和错误)和localhost.xxx.log(应用初始化的日志，错误则无法启动)
2. 磁盘是否已满（df -h）;;删除多余日志
3. 流量是否有异常  限流、降级、扩展服务节点、结构优化
4. 外部系统问题  数据库、搜索引擎、分布式缓存、消息队列的故障解决、性能优化、区分设计等
5. 应用的CPU、内存、IO


CPU分析：
1. 使用top、vmstat、ps等命令定位CPU使用率高的线程：top -Hp $pid 
2. jstack $pid 打印繁忙进程的堆栈信息 
3. 通过printf %0x $processId转换进程id进制，在堆栈信息中查找对应的堆栈信息
4. 通过jstat -gcutif $pid 查看GC的情况是否正常，是否GC引起了CPU飙高
5. JVM加入-xx:+PrintCompilation参数，查看是否时JIT编译引起了CPU飙高


CPU分析Tips
1.一个进程的CPU使用率是其所有线程之和（线程对应LWP）,CPU使用率高可以配合mpstat具体分析，是否是单线程应用程序引起的
2.top的cpu使用率近似实时，ps则是平均使用率
3.top的CPU使用率默认是lris Mode，为单CPU衡量的一个值，最大值为100%，可切换为Solaris Mode,此值在多处理环境下，为占的总的COU的使用率，例如，4核CPU中的%CPU最高值是400%
4.jstack查看线程栈时需要注意：由于jstack dump实现机制每次只能转储出一个线程的栈信息，因此输出信息中可能会看到一些冲突的信息，如一个线程正在等待的锁并没有被其他线程持有，多个线程持有同一个锁等




内存分析：
内存使用不当：频繁GC，响应缓慢；OOM，堆内存、永久代内存、本地线程内存
1.堆外内存：JNI Defiater/infiater、DirectiByteBuffer。通过vmstat、top、pidstat等查看swap和物理内存的消耗状况。通过Google+preftools来追踪JNI、Defiater这种调用的资源使用情况
2.堆内存：创建的对象、全局集合、缓存、classLoader、多线程
1)查看JVM内存使用情况：jmap -heap $pid 
2)查看JVM内存存活的对象：jmap -histo:live $pid 
3)把heap里所有对象都dump下来，无论对象是死是活:jmap -dump:format=b,file=xxx.hprof $pid 
4)先做一次Full GC,再dump，只包含仍然存活的对象信息: jmap -dump:format=b,live,file=xxx.hprof $pid 
5)使用Eclipse MAT或者jhap打开堆dump的文件，根据内存中的具体对象使用情况分析
6)VJTools中的vimap可以分代打印出堆内存的对象实例占用信息



磁盘IO分析：
1.iostat -xz 1 查看磁盘IO情况
2.r/s, w/s, rKB/s, wKB/s等指标过大，可能会引起性能问题
3.await过大，可能是硬件设备遇到了瓶颈或者出现故障，一次IO操作一般超过20ms就说明磁盘压力过大
4.avgqu-sz大于1，可能是硬件设备已经饱和
5.%util越大表示磁盘越繁忙，100%表示已经饱和
6.通过使用strace工具定位对文件IO的系统调用
"IO性能差：大量的随机读写，设备慢，文件太大"



网络IO分析：
1. netstat -anpt查看网络连接状况。当TiME_WAIT或者CLOSE_WAIT连接过多时，会影响应用的响应速度。前者需要优化内核参数；后者一般是代码Bug没有释放网络连接

2. 使用tcpdump来具体分析网络IO的数据。tcpdump出的文件直接打开就是一堆二进制数据，可以使用Wireshark查看具体的连接以及其中数据的内容。
tcpdump -i eth0 -w tmp.cap -tnn dst port 8080

3.sar -n DEV 1：查看吞吐率和吞吐数据包数；判断是否超过网卡限制


IO分析Tips:
1.%iowait在Linux的计算为CPU空闲、并且有仍未完成的IO请求的时间占总时间的比例
2.%iowait升高并不一定代表IO设备有瓶颈。需要结合其他指标来判断，如await（IO操作等待耗时）、svcim（IO操作服务耗时）等
3.avgqu-sz是按照单位时间的平均值，所以不能反应瞬间的IO洪水














































