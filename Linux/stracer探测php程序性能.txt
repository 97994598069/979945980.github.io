yum -y install strace 

top  查看负载高的php程序 pid

strace -cp <PID>

[root@deploy ~]# strace -cp 117884
strace: Process 117884 attached
^Cstrace: Process 117884 detached
% time     seconds  usecs/call     calls    errors syscall
------ ----------- ----------- --------- --------- ----------------
 16.67    0.000088          11         8           connect
 15.34    0.000081           6        13           nanosleep
 14.39    0.000076           1       112           semop
  8.71    0.000046           6         8           read
  7.95    0.000042           3        16           write
  7.77    0.000041           2        22           stat
  6.44    0.000034           1        56           rt_sigprocmask
  6.25    0.000033           4         8           close
  3.98    0.000021           1        36           clock_gettime
  3.79    0.000020           1        28           times
  2.46    0.000013           1        16           alarm
  2.46    0.000013           2         8           socket
  1.70    0.000009           9         1           restart_syscall
  1.52    0.000008           1        14           rt_sigaction
  0.57    0.000003           0         8           fcntl
------ ----------- ----------- --------- --------- ----------------
100.00    0.000528                   354           total


strace -T -e connect -p <PID>

[root@deploy ~]# strace -T -e connect -p 117884    
strace: Process 117884 attached
connect(9, {sa_family=AF_INET, sin_port=htons(10050), sin_addr=inet_addr("182.92.166.107")}, 16) = 0 <0.006369>   ##<0.006369>  表示时间单位为秒  1s等于1000ms  如果超过0.1s就算高了
connect(9, {sa_family=AF_INET, sin_port=htons(10050), sin_addr=inet_addr("182.92.166.107")}, 16) = 0 <0.005645>
connect(9, {sa_family=AF_INET, sin_port=htons(10050), sin_addr=inet_addr("123.56.156.13")}, 16) = 0 <0.005475>
connect(9, {sa_family=AF_INET, sin_port=htons(10050), sin_addr=inet_addr("123.56.156.13")}, 16) = 0 <0.006052>
connect(9, {sa_family=AF_INET, sin_port=htons(10050), sin_addr=inet_addr("127.0.0.1")}, 16) = 0 <0.000106>
connect(9, {sa_family=AF_INET, sin_port=htons(10050), sin_addr=inet_addr("127.0.0.1")}, 16) = 0 <0.000070>
connect(9, {sa_family=AF_INET, sin_port=htons(10050), sin_addr=inet_addr("182.92.166.107")}, 16) = 0 <0.004791>
connect(9, {sa_family=AF_INET, sin_port=htons(10050), sin_addr=inet_addr("101.200.126.148")}, 16) = 0 <0.007101>
connect(9, {sa_family=AF_INET, sin_port=htons(10050), sin_addr=inet_addr("127.0.0.1")}, 16) = 0 <0.000193>
connect(9, {sa_family=AF_INET, sin_port=htons(10050), sin_addr=inet_addr("101.200.126.148")}, 16) = 0 <0.005647>
connect(9, {sa_family=AF_INET, sin_port=htons(10050), sin_addr=inet_addr("127.0.0.1")}, 16) = 0 <0.000105>
connect(9, {sa_family=AF_INET, sin_port=htons(10050), sin_addr=inet_addr("123.56.156.13")}, 16) = 0 <0.006295>
connect(9, {sa_family=AF_INET, sin_port=htons(10050), sin_addr=inet_addr("127.0.0.1")}, 16) = 0 <0.000132>
^Cstrace: Process 117884 detached




如果我们用 strace 跟踪一个进程，输出结果很少，是不是说明进程很空闲？其实试试 ltrace，可能会发现别有洞天。记住有内核态和用户态之分。

ltrace的使用:
1.跟踪某个程序：例如要跟踪“top"命令的函数调用，可以使用"ltrace top"
ltrace top

2.跟踪已有的进程: 例如要跟踪已经运行的firefox进程，可以使用”ltrace -p <pid>
ltrace -p 89083 

3.跟踪进程以及其所有创建的所有子进程/线程的调用：可以使用"ltrace -f -t -p <pid>"
ltrace -f -t -p 89083



+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

1.跟踪nginx, 看其启动时都访问了哪些文件
strace -tt -T -f -e trace=file -o /data/log/strace.log -s 1024 2>&1 ./nginx   ##可用于判断可疑文件吗

2. 定位程序异常退出
strace -ttf -T -p 10893 -o tmp -e trace=process 2>&1


3.程序启动加载文件
strace -e open,acces ./sh 2>&1 | grep fileName

4. 查选程序耗时
strace -c -p 11084

5. 查看所有的系统调用
trace -T -tt -f -s 3000 -o tmp1.out ./tmp.sh | while read line ; do echo $line | sed ‘/”/,/”/s#x#\\x#g’ |xargs -0 printf ;done


6.链接服务器失败
strace -e poll,select,connect,recvfrom,sendto nc www.baidu.com 80

注：pstree -p pid 可以查看多线程程序的进程树。来跟踪具体子进程









