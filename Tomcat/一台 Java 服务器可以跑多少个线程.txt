当时就想到一台java服务器到底可以跑多少个线程呢？跟什么有关系？现整理如下。

每个线程都有一个线程栈空间通过-Xss设置，查了一下我们服务器的关于jvm内存的配置
-Xms4096m-Xmx4096m-XX:MaxPermSize=1024m

只有这三个，并没有-Xss 和-XX:ThreadStackSize的配置，因此是走的默认值。几种JVM的默认栈大小
linux      32位的320KB    64位的1MB
windows    32位的320KB    64位的1MB 

可以通过如下命令打印输出默认值的大小，命令：jinfo -flag ThreadStackSize；例如
[root@host-192-168-202-229 ~]#jinfo -flag ThreadStackSize 1807  ##1807为java进程pid
-XX:ThreadStackSize=1024

不考虑系统限制，可以通过如下公式计算，得出最大线程数量
线程数量=（机器本身可用内存-JVM分配的堆内存）/Xss的值，比如我们的容器本身大小是8G,堆大小是4096M,走-Xss默认值，可以得出 最大线程数量：4096个。

根据计算公式，得出如下结论：
结论1：jvm堆越大，系统创建的线程数量越小。
结论2：当-Xss的值越小，可生成线程数量越多。

我们知道操作系统分配给每个进程的内存大小是有限制的，比如32位的Windows是2G。因此操作系统对一个进程下的线程数量是有限制的，不能无限的增多。经验值：3000-5000左右（我没有验证）。



刚才说的是不考虑系统限制的情况，那如果考虑系统限制呢，主要跟以下几个参数有关系
/proc/sys/kernel/pid_max 增大，线程数量增大，pid_max有最高值，超过之后不再改变，而且32，64位也不一样

/proc/sys/kernel/threads-max 系统可以生成最大线程数量
max_user_process（ulimit -u）centos系统上才有，没有具体研究
/proc/sys/vm/max_map_count 增大，数量增多

线程是非常宝贵的资源，我们要严格控制线程的数量。这个是跟我们自己配置了fixed大小的线程池有关系。京东有自己的rpc框架jsf，里面可以针对每个服务端口设置线程大小。


p99：调用接口的p99
qps：调用接口的qps
a：部署应用的数量
公式：线程池大小=(qps/1000*p99)/(a-1)
比如接口的p99是200ms，qps是500，部署了5台服务器，预估线程数=(500/1000*200)/(5-1)=25
a-1用于线上发布使用，一台一台更新则减一

##p99为百分之99的响应时间在这个时间内

       
