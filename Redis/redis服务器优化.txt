修改Linux内存分配策略：
（1）向/etc/sysctl.conf添加vm.overcommit_memory = 1,然后重启服务器
（2）或者执行sysctl vm.overcommit_memory=1(立即生效)

原因
（1）redis在运行过程中可能会出现下面问题
错误日志：WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add 'vm.overcommit_memory = 1' to /etc/sysctl.conf and then reboot or run the command 'sysctl vm.overcommit_memory=1'
（2）原因：
redis在dump数据的时候，会fork出一个子进程，理论上child进程所占用的内存和parent是一样的，比如parent占用的内存为8G，这个时候也要同样分配8G的内存给child,如果内存无法负担，往往会造成redis服务器的down机或者IO负载过高，效率下降。所以内存分配策略应该设置为 1（表示内核允许分配所有的物理内存，而不管当前的内存状态如何）。

内存分配策略有三种
可选值：0、1、2。
0: 表示内核将检查是否有足够的可用内存供应用进程使用；如果有足够的可用内存，内存申请允许；否则，内存申请失败，并把错误返回给应用进程。
1: 不管需要多少内存，都允许申请。
2: 只允许分配物理内存和交换内存的大小。(交换内存一般是物理内存的一半)




关闭透明大页
THP会造成内存锁影响redis性能，建议关闭
使用root用户执行下面命令
echo never > /sys/kernel/mm/transparent_hugepage/enabled
把这条命令添加到这个文件中/etc/rc.local

原因：
（1）一般而言，内存管理的最小块级单位叫做page，一个page是4096bytes，1M的内存会有256个page，1GB的话就会有256,000个page。CPU通过内置的内存管理单元维护着page表记录。
正常来说，有两种方式来增加内存可以管理的内存大小：
a.增大硬件内存管理单元的大小(增加内存page的数量)。
b.增大page的大小。
（2）现代的硬件内存管理单元最多只支持数百到上千的page表记录，并且，对于数百万page表记录的维护算法必将与目前的数百条记录的维护算法大不相同才能保证性能，目前的解决办法是，如果一个程序所需内存page数量超过了内存管理单元的处理大小，操作系统会采用软件管理的内存管理单元，但这会使程序运行的速度变慢。
（3）简单来说， Huge Pages就是大小为2M到1GB的内存page（增大一个page的大小），主要用于管理数千兆的内存，比如1GB的page对于1TB的内存来说是相对比较合适的。
（4）THP（Transparent Huge Pages）是一个使管理Huge Pages自动化的抽象层。由于实现方式问题，THP会造成内存锁影响性能，尤其是在程序不是专门为大内内存页开发的时候，简单介绍如下:
操作系统后台有一个叫做khugepaged的进程，它会一直扫描所有进程占用的内存，在可能的情况下会把4k的page交换为Huge Pages，在这个过程中，对于操作的内存的各种分配活动都需要各种内存锁，直接影响程序的内存访问性能，并且，这个过程对于应用是透明的，在应用层面不可控制,对于专门为4k page优化的程序来说，可能会造成随机的性能下降现象。





修改Linux的tcp连接数量
做法 ：
echo 511 > /proc/sys/net/core/somaxconn

原因 ：
此参数确定了TCP连接中已完成队列(完成三次握手之后)的长度， 当然此值必须不大于Linux系统定义的/proc/sys/net/core/somaxconn值，redis默认是511，而Linux的默认参数值是128。当系统并发量大并且客户端速度缓慢的时候，可以将这二个参数一起参考设定。


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

redis3.0配置调优
导读：
a) 此文针对使用过redis或者正要使用redis的读者
b) redis单实例部署忽略主从复制和集群部分
b) 需要注意sentinel的配置不适用此版本


################################ GENERAL(常规) #####################################

a) daemonize no
   建议启用守护模式模式：daemonize yes
b) pidfile /var/run/redis.pid
   根据port指定守护进程的pid文件路径：pidfile /var/run/redis-6379.pid
c) port 6379
   指定端口：port 6379
d) bind
   默认启动ipv4和ipv6，如需禁用ipv6：bind 0.0.0.0
e) timeout 0
   N秒后关闭空闲的client连接，建议设置为120秒，不维护不活跃连接：timeout 120
f) tcp-keepalive 0
   心跳检测时间，建议60秒：tcp-keepalive 60
g) logfile ""
   根据port指定全路径文件名：logfile "/xxx/6379.log" 


################################ SNAPSHOTTING(rdb)  ################################
a) save 900 1
   save 300 10
   save 60 10000
   BGSAVE会占用额外内存，单机多实例的环境建议禁用自动BGSAVE，减少内存无序不可控：save ""
b) dbfilename dump.rdb
   根据port指定rdb文件名：dbfilename dump-6379.rdb
c) dir ./
   指定工作目录，保存rdb文件和aof文件：dir /xxx/xxx/


################################# REPLICATION(主从复制) #################################
a) # slaveof <masterip> <masterport>
   默认禁用主从模式
b) masterauth <master-password>
   如果master设置了密码，slave也需要配置

c) repl-timeout 60

   复制超时，默认60s，如果内存分配比较多（比如单实例4GB），建议调到3分钟

d) repl-backlog-size 1mb
   建议调整至128mb，或者根据实际写入压力调整，减少slave掉线全量复制的情况发生。


################################## SECURITY(安全) ###################################
a) # requirepass foobared
   密码，默认不启动，同时需要注意密码的强壮性
b) rename-command
   建议把一些重要的命令rename，防止误操作


################################### LIMITS(限制) ####################################
a) maxclients 10000
   按需调整，默认最大客户端1w
b) maxmemory
   最大内存数，默认无限制，单实例不建议超过4G
c) maxmemory-policy noeviction
   建议配置内存回收策略，否则内存写满了将导致写入失败：maxmemory-policy volatile-lru


############################## APPEND ONLY MODE(aof) ###############################
a) appendonly no
   建议开启aof，数据安全性更高：appendonly yes
b) appendfsync everysec
   默认选择everysec同步策略
c) no-appendfsync-on-rewrite no
   建议设置为yes，主进程执行BGSAVE或者BGREWRITEAOF时，会暂停调用fsync()，
   减少磁盘I/O压力：no-appendfsync-on-rewrite yes


################################ REDIS CLUSTER(集群)  ###############################
a) # cluster-enabled yes
   默认不启动集群功能，如需成为集群的节点：cluster-enabled yes
   注意主从节点都需要开启
b) # cluster-config-file nodes-6379.conf
   根据port指定文件名，不能出现冲突：cluster-config-file nodes-6379.conf
c) # cluster-node-timeout 15000
   节点超时时间默认15秒，根据线上环境进行调整，不建议比15秒小
d) cluster-require-full-coverage yes
   建议设置为no，部分node挂掉依然支持读写服务：cluster-require-full-coverage no






