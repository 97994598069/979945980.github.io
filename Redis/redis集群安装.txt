介绍安装环境与版本:
用两台虚拟机模拟6个节点，一台机器3个节点，创建出3 master、3 salve 环境。
redis 采用 redis-3.2.4 版本。
两台虚拟机都是 CentOS ，一台 CentOS6.5 （IP:172.10.10.24），一台 CentOS7（IP:172.10.10.25） 。


安装: 
2台机子上均操作
1. 下载并解压
cd /root/software
wget http://download.redis.io/releases/redis-3.2.4.tar.gz
##https://pan.baidu.com/s/1iNtW85pcE4rRO3OXboSqLA
tar -xf redis-3.2.4.tar.gz　
cd redis-3.2.4
make && make install

2.将 redis-trib.rb 复制到 /usr/local/bin 目录下
cd src
cp redis-trib.rb /usr/local/bin/　　


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
创建 Redis 节点
首先在 172.10.10.24 机器上 /root/software/redis-3.2.4 目录下创建 redis_cluster 目录；
mkdir redis_cluster

在 redis_cluster 目录下，创建名为7000、7001、7002的目录，并将 redis.conf 拷贝到这三个目录中 
mkdir -p ./redis_cluster/{7000,7001,7002}

cp redis.conf redis_cluster/7000
cp redis.conf redis_cluster/7001
cp redis.conf redis_cluster/7002　　

分别修改这三个配置文件，修改如下内容
port  7000                                        //端口7000,7001,7002       
bind 172.10.10.24（本机ip)                       //默认ip为127.0.0.1 需要改为其他节点机器可访问的ip 否则创建集群时无法访问对应的端口，无法创建集群
daemonize    yes                               //redis后台运行
pidfile  /var/run/redis_7000.pid          //pidfile文件对应7000,7001,7002
cluster-enabled  yes                           //开启集群  把注释#去掉
cluster-config-file  nodes_7000.conf   //集群的配置  配置文件首次启动自动生成 7000,7001,7002
cluster-node-timeout  15000                //请求超时  默认15秒，可自行设置
appendonly  yes                           //aof日志开启  有需要就开启，它会每次写操作都记录一条日志　


接着在另外一台机器上（172.10.10.25），的操作重复以上三步，只是把目录改为7003、7004、7005，对应的配置文件也按照这个规则修改即可


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

启动各个节点
第一台机器上执行
cd /root/software/redis-3.2.4
redis-server redis_cluster/7000/redis.conf
redis-server redis_cluster/7001/redis.conf
redis-server redis_cluster/7002/redis.conf


另外一台机器上执行
cd /root/software/redis-3.2.4
redis-server redis_cluster/7003/redis.conf
redis-server redis_cluster/7004/redis.conf
redis-server redis_cluster/7005/redis.conf



检查 redis 启动情况　
##一台机器
[root@localhost redis-3.2.4]# ps -ef | grep redis
root       5006      1  0 00:09 ?        00:00:00 redis-server 172.10.10.24:7000 [cluster]
root       5010      1  0 00:09 ?        00:00:00 redis-server 172.10.10.24:7001 [cluster]
root       5014      1  0 00:09 ?        00:00:00 redis-server 172.10.10.24:7002 [cluster]
root       5031   1333  0 00:12 pts/0    00:00:00 grep --color=auto redis

[root@localhost redis-3.2.4]# netstat -tnlp | grep redis
tcp        0      0 172.10.10.24:17000      0.0.0.0:*               LISTEN      5006/redis-server 1 
tcp        0      0 172.10.10.24:17001      0.0.0.0:*               LISTEN      5010/redis-server 1 
tcp        0      0 172.10.10.24:17002      0.0.0.0:*               LISTEN      5014/redis-server 1 
tcp        0      0 172.10.10.24:7000       0.0.0.0:*               LISTEN      5006/redis-server 1 
tcp        0      0 172.10.10.24:7001       0.0.0.0:*               LISTEN      5010/redis-server 1 
tcp        0      0 172.10.10.24:7002       0.0.0.0:*               LISTEN      5014/redis-server 1 



##另外一台机器
[root@k8s-node-2 redis-3.2.4]# ps -ef | grep redis
root       7361      1  0 00:12 ?        00:00:00 redis-server 172.10.10.25:7003 [cluster]
root       7365      1  0 00:12 ?        00:00:00 redis-server 172.10.10.25:7004 [cluster]
root       7369      1  0 00:12 ?        00:00:00 redis-server 172.10.10.25:7005 [cluster]
root       7385   3482  0 00:13 pts/1    00:00:00 grep --color=auto redis

[root@k8s-node-2 redis-3.2.4]# netstat -tlnp | grep redis
tcp        0      0 172.10.10.25:7004       0.0.0.0:*               LISTEN      7365/redis-server 1 
tcp        0      0 172.10.10.25:7005       0.0.0.0:*               LISTEN      7369/redis-server 1 
tcp        0      0 172.10.10.25:17003      0.0.0.0:*               LISTEN      7361/redis-server 1 
tcp        0      0 172.10.10.25:17004      0.0.0.0:*               LISTEN      7365/redis-server 1 
tcp        0      0 172.10.10.25:17005      0.0.0.0:*               LISTEN      7369/redis-server 1 
tcp        0      0 172.10.10.25:7003       0.0.0.0:*               LISTEN      7361/redis-server 1 


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

创建集群
Redis 官方提供了 redis-trib.rb 这个工具，就在解压目录的 src 目录中，第三步中已将它复制到 /usr/local/bin 目录中，可以直接在命令行中使用了。使用下面这个命令即可完成安装。　　
这个工具是用 ruby 实现的，所以需要安装 ruby。安装命令如下：
如下：
yum -y install ruby ruby-devel rubygems rpm-build
gem install redis
备注：
{{
在Centos7.3中，通过yum安装ruby的版本是2.0.0，但是如果有些应用需要高版本的ruby环境，比如2.2，2.3，2.4...
那就有点麻烦了，譬如：我准备使用redis官方给的工具：redis-trib.rb 这个工具构建redis集群的时候，报错了：“redis requires Ruby version >= 2.2.2”
①添加yum源安装：CentOS SCLo Software collections Repository（简单快捷）
yum install centos-release-scl-rh　　　　//会在/etc/yum.repos.d/目录下多出一个CentOS-SCLo-scl-rh.repo源
yum install rh-ruby23  -y　　　　//直接yum安装即可
scl  enable  rh-ruby23 bash　　　　//必要一步
ruby -v　　　　//查看安装版本
gem install redis
然后，redis-trib.rb这个二进制文件就可以使用了，用来构建redis集群

②下载tar压缩包安装（略微繁琐）
http://www.cnblogs.com/ding2016/p/7892542.html

③RVM（Ruby Version Manager）安装（相对官方）
gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB
可能会等待十几秒时间，然后执行下面命令：
curl -sSL https://get.rvm.io | bash -s stable
source  /etc/profile.d/rvm.sh　　　　//按照提示，执行该命令
rvm list known　　　　// list一下可以安装的版本
rvm install 2.4.1　　　　// 安装ruby 2.4.1 ，直接跟版本号即可
ruby -v 　　　　//查看验证下已经安装的版本
gem -v
至此，ruby安装完成了。

}}

redis-trib.rb  create  --replicas  1  172.10.10.24:7000 172.10.10.24:7001  172.10.10.24:7002 172.10.10.25:7003  172.10.10.25:7004  172.10.10.25:7005
其中，前三个 ip:port 为第一台机器的节点，剩下三个为第二台机器。

输入 yes 即可，然后出现如下内容，说明安装成功。

备注：使用 --replicas 1 创建 每个master带一个 slave 指令
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

验证集群
在第一台机器上连接集群的7002端口的节点，在另外一台连接7005节点，连接方式为 redis-cli -h 172.10.10.24 -c -p 7002  ,加参数 -C 可连接到集群，因为上面 redis.conf 将 bind 改为了ip地址，所以 -h 参数不可以省略。

在7005节点执行命令  set hello world ，执行结果如下：
[root@localhost redis-3.2.4]# redis-cli -h 172.10.10.24 -c -p 7002
172.10.10.24:7002> set hello world
-> Redirected to slot [866] located at 172.10.10.24:7000
OK

然后在另外一台7002端口，查看 key 为 hello 的内容， get hello  ，执行结果如下：
172.10.10.25:7005> get hello
-> Redirected to slot [866] located at 172.10.10.24:7000
"world"

说明集群运作正常。


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

原理：
redis cluster在设计的时候，就考虑到了去中心化，去中间件，也就是说，集群中的每个节点都是平等的关系，都是对等的，每个节点都保存各自的数据和整个集群的状态。每个节点都和其他所有节点连接，而且这些连接保持活跃，这样就保证了我们只需要连接集群中的任意一个节点，就可以获取到其他节点的数据。

Redis 集群没有并使用传统的一致性哈希来分配数据，而是采用另外一种叫做哈希槽 (hash slot)的方式来分配的。redis cluster 默认分配了 16384 个slot，当我们set一个key 时，会用CRC16算法来取模得到所属的slot，然后将这个key 分到哈希槽区间的节点上，具体算法就是：CRC16(key) % 16384。所以我们在测试的时候看到set 和 get 的时候，直接跳转到了7000端口的节点。

Redis 集群会把数据存在一个 master 节点，然后在这个 master 和其对应的salve 之间进行数据同步。当读取数据时，也根据一致性哈希算法到对应的 master 节点获取数据。只有当一个master 挂掉之后，才会启动一个对应的 salve 节点，充当 master 。

需要注意的是：必须要3个或以上的主节点，否则在创建集群时会失败，并且当存活的主节点数小于总节点数的一半时，整个集群就无法提供服务了。

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

集群测试：
redis-trib.rb check 172.10.10.24:7000
redis-trib.rb check 172.10.10.24:7001
redis-trib.rb check 172.10.10.24:7002

redis-trib.rb check 172.10.10.25:7003
redis-trib.rb check 172.10.10.25:7004
redis-trib.rb check 172.10.10.25:7005

上述均返回OK正常














