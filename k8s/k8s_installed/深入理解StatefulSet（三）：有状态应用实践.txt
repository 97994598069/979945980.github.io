StatefulSet有状态应用实践：

mysql集群

如何使用StatefulSet将它的集群搭建过程容器化:

具体描述：
1.是一个“主从复制”（master-Slave Replication）的mysql集群
2.有1个主节点（Master）
3.有多个从节点（slave）
4.从节点需要能水平扩展
5.所有的写操作，只能在主节点上执行
6.读操作可以在所有节点上执行


在常规环境里，部署这样一个主从模式的mysql集群的主要难点在于:如何让从节点能够拥有主节点的数据，即：如何配置主（master）从（slave）节点的复制与同步
所以，在安装好mysql的master节点之后，需要做的第一步工作，就是通过XtraBackup将Master节点的数据备份到指令目录
这一步会自动在目标目录里生成一个备份信息文件叫做：xtrabackup_binlog_info,这个文件一般会包含如下两个信息:
$ cat xtrabackup_binlog_info
TheMaster-bin.000001     481
这两个信息会在配置slave节点的时候用到


第二步，配置slave节点，slave节点在第一次启动前，需要先把master节点的备份数据，连同备份信息文件，一起拷贝到自己的数据目录（/var/lib/mysql）下。然后我们执行这样一句SQL:
TheSlave|mysql> CHANGE MASTER TO
                MASTER_HOST='$masterip',
                MASTER_USER='xxx',
                MASTER_PASSWORD='xxx',
                MASTER_LOG_FILE='TheMaster-bin.000001',
                MASTER_LOG_POS=481;

其中MASTER_LOG_FILE和MASTER_LOG_POS，就是该备份对应的二进制日志（Binary Log）文件的名称和开始的位置（偏移量），也正是xtrabackup_binlog_info文件里的那两部分内容（即：TheMaster-bin.000001和481）


第三步，启动slave节点，在这一步，我们需要执行一句SQL:
TheSlave|mysql> START SLAVE;

这样，Slave节点就启动了，它会使用备份信息文件中的二进制日志文件和偏移量，与主节点进行数据同步


第四步，在这个集群中添加更多的slave节点，需要注意的是，新添加的slave节点的备份数据，来自于已经存在的slave节点；所以，在这一步，我们需要将slave节点的数据备份在指定目录。而这个备份操作会自动生成另一种备份信息文件，叫做xtrabackup_slave_info.同样的，这个文件页包含了master_log_file和master_log_pos两个字段

然后，我们可以执行跟前面一样的“CHANGE MASTER TO”和“START SLAVE”指令来初始化并启动这个新的slave节点




通过上面的叙述，我们不难看到，将部署mysql集群的流程迁移到k8s项目上，需要能够“容器化”地解决下面的“三座大山”：
1.master节点和slave节点需要有不同的配置文件（即：不同的my.cnf）
2.master节点和slave节点需要能够传输备份信息文件
3.在slave节点第一次启动之前，需要执行一些初始化sql操作


而由于mysql本身同时拥有拓扑状态（主从节点的区别）和储存状态（mysql保存在本地的数据），我们自然要通过StatefulSet来解决这“三座大山”的问题。

其中，“第一座大山：master节点和slave节点需要有不同的配置文件”，很容易处理：我们只需要给主从节点分别准备两份不同的mysql配置文件，然后根据Pod的序号（Index）挂载进去即可

这样的配置文件信息，应该保存再configMap里供pod使用：
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql
  labels:
    app: mysql
data:
  master.cnf: |
    # 主节点 MySQL 的配置文件
    [mysqld]
    log-bin
  slave.cnf: |
    # 从节点 MySQL 的配置文件
    [mysqld]
    super-read-only

在这里，我们定义了master.cnf和slave.cnf 两个mysql的配置文件
1.master.cnf开启了log-bin,即：使用二进制日志文件的方式进行主从复制，这是一个标准的设置
2.slave.cnf的开启了super-read-only，代表的是从节点会拒绝除了主节点的数据同步操作之外的所有写操作，即：他对用户是只读的

而上述configMap定义里的data部分，是key-value格式的，比如master.cnf就是这份配置数据的key，而“|”后面的内容，就是这份配置数据的value，这份数据将来挂载进master节点对应的pod后，就会在volume目录里生成一个叫做master.cnf的文件


接下来，创建两个service来供StatefulSet以及用户使用：
apiVersion: v1
kind: Service
metadata:
  name: mysql
  labels:
    app: mysql
spec:
  ports:
  - name: mysql
    port: 3306
  clusterIP: None
  selector:
    app: mysql
---
apiVersion: v1
kind: Service
metadata:
  name: mysql-read
  labels:
    app: mysql
spec:
  ports:
  - name: mysql
    port: 3306
  selector:
    app: mysql

可以看到，这两个service都代理了所有携带app=mysql标签的pod，也就是所有mysql pod。端口映射都是用service的3306端口对应pod的3306端口

不同的是，第一个叫做mysql的service是一个Headless Service(即clusterIP=Node).所以它的作用，是通过为pod分配DNS记录来固定它的拓扑状态，比如“mysql-0.mysql”和“mysql-1.mysql”这样的DNS名字，其中，编号为0的节点就是我们的主节点

而第二个名叫“mysql-read”的service，则是一个常规的service

并且我们规定，所有用户的读请求，都必须访问第二个service被自动分配的DNS记录，即“mysql-read”(当然，也可以访问这个service的VIP).这样，读请求就可以被转发到任意一个mysql的主节点或者从节点上

备注：
k8s中的所有service、pod对象，都会被自动分配同名的DNS记录；而所有用户的写请求，则必须直接以DNS记录的方式访问到mysql的主节点，也就是: "mysql-0.mysql"这条DNS记录



接下来，第二座大山，master节点和slave节点需要能够传输备份文件的问题
思路:先搭建框架，再完善细节，其中，Pod部分如何定义，是完善细节时的重点
1.首先为StatefulSet对象规划一个大致的框架:
apiVersion: app/v1 
kind: StatefulSet 
metadata:
  name: mysql 
spec:
  selector:
    matchLabels:
	  app: mysql 
  serviceName: mysql 
  replicas: 3
  template:
    metadata:
	  labels:
	    app: mysql
	spec:
	  initContainers:
	  - name: init-mysql 
	  - name: clone-mysql 
	  containers:
	  - name: mysql 
	  - name: xtrabackup 
	  volumes:
	  - name: conf
	    emptyDir: {}
	  - name: config-map
	    configMap:
		  name: mysql 
	volumeClaimTemplates:
	- metadata:
	    name: data 
	  spec:
	    accessModes: ["ReadWriteOnce"]
		resources:
		  requests:
		    storage: 10Gi
在这一步，我们可以先为StatefulSet定义一些通用的字段
比如: selector表示，这个StatefulSet要管理的Pod必须携带app=mysql标签；它声明要使用的Headless Service的名字是:mysql 

这个StatefulSet的replicas值是3，表示它定义的mysql集群有三个节点：一个master节点，两个slave节点

可以看到StatefulSet管理的"有状态应用"的多个实例，也都是通过同一份Pod模板创建出来的，使用的是同一个Docker镜像。这就意味着：如果你的应用要求不同节点的镜像不一样，那就不能再使用StatefulSet了，对于这种情况，应该考虑我后面会讲解到的operator


除了这些基本的字段外，作为一个有储存状态mysql集群，StatefulSet还需要管理储存状态。所以，我们需要通过volumeClaimTemplate(PVC模板)来为每个pod定义PVC。比如这个PVC模板的resources.request.strorage指定了存储的大小为10GiB

ReadWriteOnce指定了该储存的属性为可读写，并且一个PV只允许挂载在一个宿主机上。将来，这个PV对应的volume就会充当mysql Pod的存储数据目录


然后，我们来重点设计一下这个StatefulSet的pod模板，也就是template字段。
由于StatefulSet管理的pod都来自同一个镜像，这就要求我们在编写pod时候，一定要保持清醒，用“人格分裂”的方式进行思考:
1.如果这个pod是master节点，需要怎么做？
2.如果这个pod是slave节点需要怎么做？

第一步：从configMap中，获取mysql的pod对应的配置文件。
为此，需要进行一个初始化操作，根据节点的角色是master还是slave节点，为pod分配对应的配置文件，此外，mysql还要求集群里的每个节点都有一个唯一的ID文件，名叫server-id.cnf

而根据我们已经掌握的Pod知识，这些初始化操作显然适合通过InitContainer来完成，所以，我们首先定义了一个InitContainer，如下所示：
      ...
      # template.spec
      initContainers:
      - name: init-mysql
        image: mysql:5.7
        command:
        - bash
        - "-c"
        - |
          set -ex
          # 从 Pod 的序号，生成 server-id
          [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
          ordinal=${BASH_REMATCH[1]}
          echo [mysqld] > /mnt/conf.d/server-id.cnf
          # 由于 server-id=0 有特殊含义，我们给 ID 加一个 100 来避开它
          echo server-id=$((100 + $ordinal)) >> /mnt/conf.d/server-id.cnf
          # 如果 Pod 序号是 0，说明它是 Master 节点，从 ConfigMap 里把 Master 的配置文件拷贝到 /mnt/conf.d/ 目录；
          # 否则，拷贝 Slave 的配置文件
          if [[ $ordinal -eq 0 ]]; then
            cp /mnt/config-map/master.cnf /mnt/conf.d/
          else
            cp /mnt/config-map/slave.cnf /mnt/conf.d/
          fi
        volumeMounts:
        - name: conf
          mountPath: /mnt/conf.d
        - name: config-map
          mountPath: /mnt/config-map

在这个名叫init-mysql的InitContainer的配置中，它从Pod的hostname里，读取到了Pod的序号，以此作为mysql节点的server-id

然后init-mysql通过这个序号，判断当前pod到底是master节点（即:序号为0）还是slave节点（即：序号不为0），从而把对应的配置文件从/mnt/config-map目录拷贝到/mnt/conf.d/目录下

其中，文件拷贝的源目录/mnt/config-map，正是configMap在这个Pod的volume,如下:
      ...
      # template.spec
      volumes:
      - name: conf
        emptyDir: {}
      - name: config-map
        configMap:
          name: mysql

通过这个定义，init-mysql在声明了挂载config-map这个volume之后，configmap里保存的内容，就会以文件的方式出现在它的/mnt/config-map目录当中

而文件拷贝的目标目录，即容器里的/mnt/conf.d/目录，对应的则是一个名叫conf的emptyDir类型的volume。基于Pod volume共享的原理，当InitContainer复制完配置文件退出后，后面启动的mysql容器只需要直接声明挂载这个名叫conf的volume,它所需要的.cnf配置文件已经出现在了里面了。这和之前介绍的tomcat和war包的处理方法是完全一样的


第二步：在slave pod启动前，从master或者其他slave Pod里拷贝数据库数据到自己的目录下
为了实现这个操作，我们需要定义第二个InitContainer：
      ...
      # template.spec.initContainers
      - name: clone-mysql
        image: gcr.io/google-samples/xtrabackup:1.0
        command:
        - bash
        - "-c"
        - |
          set -ex
          # 拷贝操作只需要在第一次启动时进行，所以如果数据已经存在，跳过
          [[ -d /var/lib/mysql/mysql ]] && exit 0
          # Master 节点 (序号为 0) 不需要做这个操作
          [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
          ordinal=${BASH_REMATCH[1]}
          [[ $ordinal -eq 0 ]] && exit 0
          # 使用 ncat 指令，远程地从前一个节点拷贝数据到本地
          ncat --recv-only mysql-$(($ordinal-1)).mysql 3307 | xbstream -x -C /var/lib/mysql
          # 执行 --prepare，这样拷贝来的数据就可以用作恢复了
          xtrabackup --prepare --target-dir=/var/lib/mysql
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
          subPath: mysql
        - name: conf
          mountPath: /etc/mysql/conf.d

在这个名叫clone-mysql的InitContainer里，我们使用的是xtrabackup镜像（它里面按照了xtrabackup工具）

而在它的启动命令里，我们首先做了一个判断，即：当初始化所需的数据（/var/lib/mysql/mysql目录）已经存在，或者当前pod是master节点的时候，不需要做拷贝操作

接下来，clone-mysql会使用linux自带的ncat指令，向DNS记录为“mysql-<当前序号减-->.mysql”的pod，也就是当前pod的前一个Pod，发起数据传输请求，并且直接用xbstream指令将收到的备份数据保存在/var/lib/mysql目录下

备注：3307是一个特殊端口，运行着一个专门负责备份mysql数据的辅助进行

方然，这一步可以所以随意选择用自己喜欢的方法来传输数据，比如，用scp或者rsync，都没问题

你可能已经注意到了，这个容器里的/var/lib/mysql目录，实际上正是一个名为data的PVC，即：我们在前面声明的持久化储存
这样就可以保证，哪怕宿主机宕机了，我们数据库的数据也不会丢失，更重要的是，由于Pod Volume是被pod里的容器共享的，所以后面启动的mysql容器就可以把这个volume挂载到自己的/var/lib/mysql目录下，直接使用里面的备份数据进行恢复操作


不过，clone-mysql容器还要对/var/lib/mysql目录，执行一句xtrabackup --prepare操作，目的是让拷贝来的数据进入一致性状态，这样，数据才能被用作数据恢复
至此，我们就通过InitContainer完成了对“主、从节点间备份文件传输”操作的处理过程，也就是翻过了“第二座大山”



接下来，开始定义mysql容器，启动mysql服务了，由于StatefulSet里的所有Pod都来自用同一个Pod模板，所以我们还要“人格分裂”地去思考:这个mysql容器的启动命令，在master和slave两种情况有什么不同

有了Docker镜像，在Pod里声明一个Master角色的mysql容器并不是什么困难的事情：直接执行mysql启动命令即可:

但是如果这个pod是第一次启动slave节点，在执行mysql启动命令之前，它就需要使用前面InitContainer拷贝来的备份数据进行初始化。

可是，别忘了，容器时一个单进程模型；所以，一个slave角色的mysql容器启动之前，谁能负责给它执行初始化的SQL语句呢？这就是需要解决的第三座大山的问题，即如何在slave节点的mysql容器第一次启动之前，执行初始化SQL

此时，我们可以为这个mysql容器额外定义一个sidecar容器，来完成这个操作：
      ...
      # template.spec.containers
      - name: xtrabackup
        image: gcr.io/google-samples/xtrabackup:1.0
        ports:
        - name: xtrabackup
          containerPort: 3307
        command:
        - bash
        - "-c"
        - |
          set -ex
          cd /var/lib/mysql
          
          # 从备份信息文件里读取 MASTER_LOG_FILEM 和 MASTER_LOG_POS 这两个字段的值，用来拼装集群初始化 SQL
          if [[ -f xtrabackup_slave_info ]]; then
            # 如果 xtrabackup_slave_info 文件存在，说明这个备份数据来自于另一个 Slave 节点。这种情况下，XtraBackup 工具在备份的时候，就已经在这个文件里自动生成了 "CHANGE MASTER TO" SQL 语句。所以，我们只需要把这个文件重命名为 change_master_to.sql.in，后面直接使用即可
            mv xtrabackup_slave_info change_master_to.sql.in
            # 所以，也就用不着 xtrabackup_binlog_info 了
            rm -f xtrabackup_binlog_info
          elif [[ -f xtrabackup_binlog_info ]]; then
            # 如果只存在 xtrabackup_binlog_inf 文件，那说明备份来自于 Master 节点，我们就需要解析这个备份信息文件，读取所需的两个字段的值
            [[ `cat xtrabackup_binlog_info` =~ ^(.*?)[[:space:]]+(.*?)$ ]] || exit 1
            rm xtrabackup_binlog_info
            # 把两个字段的值拼装成 SQL，写入 change_master_to.sql.in 文件
            echo "CHANGE MASTER TO MASTER_LOG_FILE='${BASH_REMATCH[1]}',\
                  MASTER_LOG_POS=${BASH_REMATCH[2]}" > change_master_to.sql.in
          fi
          
          # 如果 change_master_to.sql.in，就意味着需要做集群初始化工作
          if [[ -f change_master_to.sql.in ]]; then
            # 但一定要先等 MySQL 容器启动之后才能进行下一步连接 MySQL 的操作
            echo "Waiting for mysqld to be ready (accepting connections)"
            until mysql -h 127.0.0.1 -e "SELECT 1"; do sleep 1; done
            
            echo "Initializing replication from clone position"
            # 将文件 change_master_to.sql.in 改个名字，防止这个 Container 重启的时候，因为又找到了 change_master_to.sql.in，从而重复执行一遍这个初始化流程
            mv change_master_to.sql.in change_master_to.sql.orig
            # 使用 change_master_to.sql.orig 的内容，也是就是前面拼装的 SQL，组成一个完整的初始化和启动 Slave 的 SQL 语句
            mysql -h 127.0.0.1 <<EOF
          $(<change_master_to.sql.orig),
            MASTER_HOST='mysql-0.mysql',
            MASTER_USER='root',
            MASTER_PASSWORD='',
            MASTER_CONNECT_RETRY=10;
          START SLAVE;
          EOF
          fi
          
          # 使用 ncat 监听 3307 端口。它的作用是，在收到传输请求的时候，直接执行 "xtrabackup --backup" 命令，备份 MySQL 的数据并发送给请求者
          exec ncat --listen --keep-open --send-only --max-conns=1 3307 -c \
            "xtrabackup --backup --slave-info --stream=xbstream --host=127.0.0.1 --user=root"
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
          subPath: mysql
        - name: conf
          mountPath: /etc/mysql/conf.d
可以看到，在这个名叫xtrabackup的sidecar容器的启动命令里，其实实现了两份工作
1.第1份工作，当然是mysql节点的初始化工作，这个初始化需要使用SQL，是sidecar容器拼装出来、保存再一个名为change_master_to.sql.in的文件里的，具体过程如下:
sidecar容器首先会判断当前pod的/var/lib/mysql目录下，是否有xtrabackup_slave_info这个备份信息文件。

1.如果有，则说明这个目录下的备份数据是由一个Slave节点生成的，这种情况下，xtrabackup工具在备份的时候，就已经在这个文件里自动生成了“CHANGE MASTER TO”SQL语句，所以，我们只需要把这个文件重命名为change_master_to.sql.in,后面直接使用即可 

2.如果没有，xtrabackup_slave_info文件、但是存在xtrabackup_binlog_info文件，那就说明备份数据来自于master节点。这种情况下，sideca容器就需要解析这个备份信息文件，读取MASTER_LOG_FILE和MASTER_LOG_POS这两个字段的值，用他们拼装出初始化SQL语句，然后把这句SQL导入到change_master_to.sql.in文件中

接下来，sidecar容器就可以执行初始化了，从上面的叙述中可以看到，只要这个change_master_to.sql.in文件存在，那就说明接下来需要进行集群初始化操作

所以，这时候，sidecar容器只需要读取并执行change_master_to.sql.in 里面的“change_master_to”指令，再执行一句start slave命令，一个slave节点就被成功启动了

需要注意的是，pod里的容器并没有先后顺序，所以在执行初始化SQL之前，必须先执行一句SQL(select 1)来检查一下mysql服务是否已经可用


当然，上述这些初始化操作完成后，我们还要删除掉前面用到的这些备份信息文件。否则，下次这个容器重启时，就会发现这些文件存在，所以又会重新执行一次数据恢复和集群初始化的操作，这是不对的

同理，change_master_to.sql.in 在使用后也要被重命名，以免容器重启时因为发现这个文件存在又执行一遍初始化



在完成mysql节点的初始化后，这个sidecar容器的第二个工作，则是启动一个数据传输服务：
具体做法：
sidecar容器会使用ncat命令启动一个工作在3307端口上的网络发送服务，一旦收到数据传输请求时，sidecar容器就会调用xtrabackup --backup指令备份当前mysql的数据，然后把这些备份数据返回给请求者。这就是为什么我们在InitContainer里定义数据拷贝的时候访问的是“上一个mysql节点”的3307端口


值得一提的，是由于sidecar容器和mysql容器同处于一个Pod里，所以它是直接通过localhost来访问和备份mysql容器的数据的，非常方便

至此，翻越了第三座大山，完成了slave节点第一次启动前的初始化工作:
定义pod里的主角，mysql容器：
      ...
      # template.spec
      containers:
      - name: mysql
        image: mysql:5.7
        env:
        - name: MYSQL_ALLOW_EMPTY_PASSWORD
          value: "1"
        ports:
        - name: mysql
          containerPort: 3306
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
          subPath: mysql
        - name: conf
          mountPath: /etc/mysql/conf.d
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
        livenessProbe:
          exec:
            command: ["mysqladmin", "ping"]
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          exec:
            # 通过 TCP 连接的方式进行健康检查
            command: ["mysql", "-h", "127.0.0.1", "-e", "SELECT 1"]
          initialDelaySeconds: 5
          periodSeconds: 2
          timeoutSeconds: 1

		  
在这个容器定义里，我们使用了一个标准的mysql5.7的官方镜像，它的数据目录是/var/lib/mysql。配置文件目录是/etc/mysql/conf.d 

这时候，应该能够明白，如果mysql容器里slave节点的话，它的数据目录里的数据，就来自于InitContainer从其他节点里拷贝而来的备份，它的配置文件目录/etc/mysql/conf.d里的内容，则来自于configMap对应的volume。而它的初始化工作，则是由同一个pod里的sidecar容器完成的

另外，还为它定义了一个livenessProbe，通过，mysqladmin ping 命令来检查它是否健康；还定义了一个readinessProbe,通过查询SQL(select 1)来检查Mysql服务是否可用，当然，凡是readinessProbe检查失败的Mysql Pod，都会从service里被摘除掉

至此，一个完整的主从复制模式的mysql集群就定义完了


运行该StatefulSet:
$ kubectl create -f rook-storage.yaml
$ cat rook-storage.yaml
apiVersion: ceph.rook.io/v1beta1
kind: Pool
metadata:
  name: replicapool
  namespace: rook-ceph
spec:
  replicated:
    size: 3
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: rook-ceph-block
provisioner: ceph.rook.io/block
parameters:
  pool: replicapool
  clusterNamespace: rook-ceph

在这里，用到了StorgeClass来完成这个操作，它的作用，是自动地为集群里存在的每一个PVC,调用储存插件（ROOK）创建对应的PV,从而省去了我们手动创建PV的机械劳动
备注:
在使用ROOK的情况下，mysql-statefulSet.yaml里的volumeClaimTemplates字段需要加上声明storgeClassName=rook-cepj-block，才能使用到这个ROOK提供的持久化储存


然后创建这个StatefulSet:
$ kubectl create -f mysql-statefulset.yaml
$ kubectl get pod -l app=mysql
NAME      READY     STATUS    RESTARTS   AGE
mysql-0   2/2       Running   0          2m
mysql-1   2/2       Running   0          1m
mysql-2   2/2       Running   0          1m
可以看到，statefulSet启动完成后，会有三个pod运行


接下来，我们可以尝试向这个mysql集群发起请求，执行一些sql操作来验证它是否非常:
$ kubectl run mysql-client --image=mysql:5.7 -i --rm --restart=Never --\
  mysql -h mysql-0.mysql <<EOF
CREATE DATABASE test;
CREATE TABLE test.messages (message VARCHAR(250));
INSERT INTO test.messages VALUES ('hello');
EOF


如上所示，我们通过启动一个容器，使用mysql client执行了创建数据库和表、以及插入数据的操作。需要注意的是，我们连接的mysql的地址必须是mysql-0.mysql(即:Master 节点的DNS记录)。因为，只有master节点才能处理写操作

而通过连接mysql-read这个service，我们可以用sql进行读操作：
$ kubectl run mysql-client --image=mysql:5.7 -i -t --rm --restart=Never --\
 mysql -h mysql-read -e "SELECT * FROM test.messages"
Waiting for pod default/mysql-client to be running, status is Pending, pod ready: false
+---------+
| message |
+---------+
| hello   |
+---------+
pod "mysql-client" deleted


在有了StatefulSet以后，你就可以像Deployment那样，非常方便地扩展这个mysql集群：
$ kubectl scale statefulset mysql  --replicas=5

这时候，你会发现新的slave Pod mysql-3和mysql-4被自动创建了出来

而如果你像如下所示的这样，直接连接mysql-3.mysql,即mysql-3这个pod的DNS名字来进行查询操作:
$ kubectl run mysql-client --image=mysql:5.7 -i -t --rm --restart=Never --\
  mysql -h mysql-3.mysql -e "SELECT * FROM test.messages"
Waiting for pod default/mysql-client to be running, status is Pending, pod ready: false
+---------+
| message |
+---------+
| hello   |
+---------+
pod "mysql-client" deleted

就会发现，从StatefulSet为我们新创建的mysql-3上，同样可以读取到哦之前插入的记录，也就是说，我们的数据备份和恢复，都是有效的


如何对StatefulSet进行“滚动更新”：
$ kubectl patch statefulset mysql --type='json' -p='[{"op": "replace", "path": "/spec/template/spec/containers/0/image", "value":"mysql:5.7.23"}]'
statefulset.apps/mysql patched
















































  
  




























		  
		  
		  
