网络栈：包括了，网卡、回环设备、路由表和iptables规则，对于一个进程来说，这些要素，其实就构成了它发起和响应网络请求的基本环境

需要指出的是，作为一个容器，它可以声明直接使用宿主机的网络栈（-net=host），即：不开启Network Namespace

$ docker run –d –net=host --name nginx-host nginx
在这种情况下，这个容器启动后，直接监听的就是宿主机的80端口


像这样直接使用宿主机网络栈的方式，虽然可以为容器提供良好的网络性能，但也会不可避免地引入共享网络资源的问题，比如端口冲突，所以，在大多数情况下，我们都希望容器进程能使用自己Network Namespace里的网络栈，即：拥有属于自己的Ip地址和端口

这时候，一个显而易见的问题就是：这个被隔离的容器进程，该如何跟其他Network Nampspace里的容器进程进行交互呢？

为了理解这个问题，其实可以把每一个容器看做一台主机，他们都有一套独立的“网络栈”

如果，你想要实现两台主机之间的通信，最直接的办法，就是把他们用一根网线连接起来；而如果你想要实现多台主机之间的通信，那就需要用网线，把它们连接在一台交换机上


在Linux中，能够起到虚拟交换机作用的网络设备，是网桥（Bridge）.它是一个工作在数据链路层（Data Link）的设备，主要功能是根据mac地址学习来将数据包转发到网桥的不同端口（Port）上

而为了实现上述目的，Docker项目会默认在宿主机上创建一个名叫docker0的网桥，凡是连接在docker0网桥上的容器，就可以通过它来进行通信


可是，我们又该如何把这些容器“连接”到docker0网桥上呢？这就需要虚拟设备：veth pair

veth pair设备的特点是：它被创建出来后，总是以两张虚拟网卡（veth peer）的形式完成对出现的，并且，从其中一个“网卡”发出的数据包，可以直接出现在与它对应的另一张“网卡”上，哪怕这两个“网卡”在不同的Network里

这就使得Veth Pair常常被用作连接不同Network Namespace的“网线”。

比如，现在我们启动了一个叫做nginx-1的容器:
$ docker run –d --name nginx-1 nginx

然后进入到这个容器中查看一下它的网络设备:
# 在宿主机上
$ docker exec -it nginx-1 /bin/bash
# 在容器里
root@2b3c181aecf1:/# ifconfig
eth0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 172.17.0.2  netmask 255.255.0.0  broadcast 0.0.0.0
        inet6 fe80::42:acff:fe11:2  prefixlen 64  scopeid 0x20<link>
        ether 02:42:ac:11:00:02  txqueuelen 0  (Ethernet)
        RX packets 364  bytes 8137175 (7.7 MiB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 281  bytes 21161 (20.6 KiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
        
lo: flags=73<UP,LOOPBACK,RUNNING>  mtu 65536
        inet 127.0.0.1  netmask 255.0.0.0
        inet6 ::1  prefixlen 128  scopeid 0x10<host>
        loop  txqueuelen 1000  (Local Loopback)
        RX packets 0  bytes 0 (0.0 B)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 0  bytes 0 (0.0 B)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
        
$ route
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
default         172.17.0.1      0.0.0.0         UG    0      0        0 eth0
172.17.0.0      0.0.0.0         255.255.0.0     U     0      0        0 eth0


可以看到，这个容器里有一张叫做eth0的网卡，它正是一个veth pair设备在容器里这一端

通过route命令查看nginx-1容器的路由表，我们可以看到，这个eth0网卡是这个容器里的默认路由设备；所有对172.10.0.0/16网段的请求，也会被交给eth0来处理（第二条172.17.0.0路由规则）。

而这个veth Pair设备的另一端，则在宿主机上，你可以通过查看宿主机的网络设备看到它，如下:
# 在宿主机上
$ ifconfig
...
docker0   Link encap:Ethernet  HWaddr 02:42:d8:e4:df:c1  
          inet addr:172.17.0.1  Bcast:0.0.0.0  Mask:255.255.0.0
          inet6 addr: fe80::42:d8ff:fee4:dfc1/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:309 errors:0 dropped:0 overruns:0 frame:0
          TX packets:372 errors:0 dropped:0 overruns:0 carrier:0
 collisions:0 txqueuelen:0 
          RX bytes:18944 (18.9 KB)  TX bytes:8137789 (8.1 MB)
veth9c02e56 Link encap:Ethernet  HWaddr 52:81:0b:24:3d:da  
          inet6 addr: fe80::5081:bff:fe24:3dda/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:288 errors:0 dropped:0 overruns:0 frame:0
          TX packets:371 errors:0 dropped:0 overruns:0 carrier:0
 collisions:0 txqueuelen:0 
          RX bytes:21608 (21.6 KB)  TX bytes:8137719 (8.1 MB)
          
$ brctl show
bridge name bridge id  STP enabled interfaces
docker0  8000.0242d8e4dfc1 no  veth9c02e56

通过ifconfig命令的输出，可以看到，nginx-1容器对应的veth Pair设备，在宿主机上是一张虚拟网卡，它的名字叫做veth9c02e56,并且，通过brctl show,可以看到这张网卡被“插”在了docker0上


这时候，如果我们再在这台宿主机上启动另一个Docker容器，比如 nginx-2:
$ docker run –d --name nginx-2 nginx
$ brctl show
bridge name bridge id  STP enabled interfaces
docker0  8000.0242d8e4dfc1 no  veth9c02e56
       vethb4963f3

你就会发现一个新的，名叫做vethb4963f3的虚拟网卡，也被“插”在了docker网桥上


这时候，如果你在nginx-1容器里ping一下nginx-2容器的ip地址（172.17.0.3），就会发现同一宿主机上的两个容器就是默认相互连通的

这其中的原理如下:
当你再nginx-1容器里访问nginx-2容器的IP地址（比如ping 172.17.0.3）的时候，这个目的IP地址会匹配到nginx-1容器里的第二条理由规则。可以看到，这条路由规则的网关（Gateway）是0.0.0.0，这就意味着这是一条直连规则，即：凡是匹配到这条规则的IP包，应该经过本机的eth0网卡，通过二层网络直接发往目的主机

而要通过二层网络到达nginx-2容器，就需要有172.17.0.3这个IP地址对应的MAC地址.所以nginx-1容器的网络协议栈，就需要通过eth0网卡发送一个ARP广播，来通过IP地址查找对应的MAC地址
备注: ARP(Address Resolution Protocol),是通过三层的IP地址找到对应的二层MAC地址的协议


这个eth0网卡，是一个veth pair，它的一端在这个nginx-1容器的Network Namespace里，而另一端则位于宿主机上，并且被插上了宿主机的docker0网桥上

一旦一张虚拟网卡插在网桥上，它就会变成该网桥的“从设备”。从设备会被“剥夺”调用网络协议栈处理数据包的资格，从而“降级”称为网桥上的一个端口。而这个端口唯一的作用，就是接收流入的数据包，然后把这些数据包的“生杀大权”（比如转发或者丢弃），全部交给对方的网桥

所以，在收到这些ARP请求之后，docker0网桥就会扮演二层交换机的角色，把ARP广播转发到其他被“插”在docker0上的虚拟网卡上，这样，同样连接在docker0上的nginx-2容器的网络协议栈就会收到这个ARP请求，从而将172.10.0.3所对应的MAC地址回复给nginx-1容器


有了这个目的MAC地址,nginx-1容器的eth0网卡就可以将数据包发出去

而根据Veth Pair设备的原理，这个数据包会立刻出现在宿主机上的veth9c02e56虚拟网卡上，不过，此时这个veth9c02e56网卡的网络协议栈的资格已经被“剥夺”，所以这个数据包就直接流入到了docker0网桥里


docker0处理转发的过程，则继续扮演二层交换机的角色，此时，docker0网桥根据数据包的目的MAC地址（也就是nginx-2容器的MAC地址），在它的CAM表（即交换机通过MAC地址学习维护的端口和MAC地址的对应表）里查到对应的端口（port）为：vethb4963f3,然后把这个数据包发往这个端口

而这个端口，正是nginx-2容器插在docker0网桥上的另一块虚拟网卡，当然，它也是一个veth pair设备，这样，数据包就进入到了nginx-2容器的Network Namespace里

所以，nginx-2容器看到的情况是，它自己的eth0网卡上出现了流入的数据包，这样，nginx-2的网络协议就会对请求进行处理，最后将响应（pong）返回到nginx-1



























