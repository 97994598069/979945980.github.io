两种：
1.service环境变量
2.DNS

环境变量：
当一个pod运行到Node，kubelet会为每个容器添加一组环境变量，Pod容器中程序就可以使用这些环境变量发现service
环境变量名格式如下：
{SVCNAME}_SERVICE_HOST
{SVCNAME}_SERVICE_PORT
其中服务名和端口名转为大写，连字符转为下划线

限制：
1)Pod和Service的创建顺序是有要求的，Service必须在Pod创建之前被创建，否则环境变量不会设置到pod中
2)pod只能获取同Namespace中的Service环境变量

DNS：
DNS服务监视kubernetes API,为每一个service创建DNS记录用于域名解析。这样pod中就可以通过DNS域名获取Service的访问地址

部署多个应用的时候，他们怎么去通信：
例如：你部署了一个tomcat集群，这些pod及副本运行在不同的node上，此时你又部署了一个mysql集群，你怎么让你的tomcat及副本都连接到你的mysql呢
此时你就需要一个service来提供一个特定的入口；通过service的cluster-ip和端口来访问service后端的服务

两组组件，虽然两组组件都各自的service来做代理
但是应该怎么发现呢


验证：
vi basybox.yaml
apiVersion: v1
kind: Pod
metadata:
    name: busybox   
    namespace: default
spec:
    containers:
    - image: busybox   ##最新的镜像有问题可以使用busybox:1.28.4
      command:
        - sleep
        - "3600"
      imagePullPolicy: IfNotPresent
      name: busybox
    restartPolicy: Always

[root@k8s01 kube-dns]# kubectl create -f busybox.yaml 
	
[root@k8s01 kube-dns]# kubectl exec -ti busybox sh
进入之后输入env
/ # env   ##包含全部service的环境变量
KUBERNETES_SERVICE_PORT=443
KUBERNETES_PORT=tcp://10.1.7.1:443
HTTPD_SERVICE_HOST=10.1.7.227
HOSTNAME=busybox
SHLVL=1
HOME=/root
NGINX_PORT_80_TCP=tcp://10.1.7.142:80
HTTPD_PORT=tcp://10.1.7.227:80
HTTPD_SERVICE_PORT=80
HTTPD_PORT_80_TCP_ADDR=10.1.7.227
TERM=xterm
KUBERNETES_PORT_443_TCP_ADDR=10.1.7.1
HTTPD_PORT_80_TCP_PORT=80
HTTPD_PORT_80_TCP_PROTO=tcp
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
NGINX_SERVICE_HOST=10.1.7.142
KUBERNETES_PORT_443_TCP_PORT=443
KUBERNETES_PORT_443_TCP_PROTO=tcp
NGINX_PORT=tcp://10.1.7.142:80
HTTPD_PORT_80_TCP=tcp://10.1.7.227:80
NGINX_SERVICE_PORT=80
KUBERNETES_PORT_443_TCP=tcp://10.1.7.1:443
KUBERNETES_SERVICE_PORT_HTTPS=443
KUBERNETES_SERVICE_HOST=10.1.7.1
PWD=/
NGINX_PORT_80_TCP_ADDR=10.1.7.142
NGINX_PORT_80_TCP_PORT=80
NGINX_PORT_80_TCP_PROTO=tcp

##变量的规格全部统一规格
{服务名}_SERVICE_HOST 
{服务名}_SERVICE_PORT 
例如上面的nginx和http的
kubectl run nginx --image=nginx 
kubectl expose deployment nginx --port=80   ##服务名就是nginx 

kubectl run httpd --image=httpd
kubectl expose deployment httpd --port=80   ##服务名就是httpd

这样我们就可以来调用变量来通信集群内部的其他组件各个服务
例如微服务


上述为环境变量的变法来解决通信问题
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

安装kube-dns

下载yaml文件修改其中的内容：
https://github.com/kubernetes/kubernetes/blob/master/cluster/addons/dns/kube-dns/kube-dns.yaml.sed


修改：
clusterIP: 10.1.7.2    ##ps -ef |grep kubelet  可看到

##修改为阿里的镜像源
- name: kubedns
image: registry.cn-hangzhou.aliyuncs.com/google_containers/k8s-dns-kube-dns-amd64:1.14.7


--domain=cluster.local    ##ps -ef |grep kubelet  可看到
 

##修改为阿里的镜像源
 - name: dnsmasq
        image: registry.cn-hangzhou.aliyuncs.com/google_containers/k8s-dns-dnsmasq-nanny-amd644:1.14.7
		

##修改为阿里的镜像源		
 - name: sidecar
        image: registry.cn-hangzhou.aliyuncs.com/google_containers/k8s-dns-sidercar-amd64:1.14.7
	
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

修改后

# Copyright 2016 The Kubernetes Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Should keep target in cluster/addons/dns-horizontal-autoscaler/dns-horizontal-autoscaler.yaml
# in sync with this file.

# Warning: This is a file generated from the base underscore template file: kube-dns.yaml.base

apiVersion: v1
kind: Service
metadata:
  name: kube-dns
  namespace: kube-system
  labels:
    k8s-app: kube-dns
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
    kubernetes.io/name: "KubeDNS"
spec:
  selector:
    k8s-app: kube-dns
  clusterIP: 10.1.7.2
  ports:
  - name: dns
    port: 53
    protocol: UDP
  - name: dns-tcp
    port: 53
    protocol: TCP
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kube-dns
  namespace: kube-system
  labels:
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kube-dns
  namespace: kube-system
  labels:
    addonmanager.kubernetes.io/mode: EnsureExists
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: kube-dns
  namespace: kube-system
  labels:
    k8s-app: kube-dns
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
spec:
  # replicas: not specified here:
  # 1. In order to make Addon Manager do not reconcile this replicas parameter.
  # 2. Default is 1.
  # 3. Will be tuned in real time if DNS horizontal auto-scaling is turned on.
  strategy:
    rollingUpdate:
      maxSurge: 10%
      maxUnavailable: 0
  selector:
    matchLabels:
      k8s-app: kube-dns
  template:
    metadata:
      labels:
        k8s-app: kube-dns
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ''
    spec:
      tolerations:
      - key: "CriticalAddonsOnly"
        operator: "Exists"
      volumes:
      - name: kube-dns-config
        configMap:
          name: kube-dns
          optional: true
      containers:
      - name: kubedns
        image: registry.cn-hangzhou.aliyuncs.com/google_containers/k8s-dns-kube-dns-amd64:1.14.7
        resources:
          # TODO: Set memory limits when we've profiled the container for large
          # clusters, then set request = limit to keep this container in
          # guaranteed class. Currently, this container falls into the
          # "burstable" category so the kubelet doesn't backoff from restarting it.
          limits:
            memory: 170Mi
          requests:
            cpu: 100m
            memory: 70Mi
        livenessProbe:
          httpGet:
            path: /healthcheck/kubedns
            port: 10054
            scheme: HTTP
          initialDelaySeconds: 60
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 5
        readinessProbe:
          httpGet:
            path: /readiness
            port: 8081
            scheme: HTTP
          # we poll on pod startup for the Kubernetes master service and
          # only setup the /readiness HTTP server once that's available.
          initialDelaySeconds: 3
          timeoutSeconds: 5
        args:
        - --domain=cluster.local.
        - --dns-port=10053
        - --config-dir=/kube-dns-config
        - --v=2
        env:
        - name: PROMETHEUS_PORT
          value: "10055"
        ports:
        - containerPort: 10053
          name: dns-local
          protocol: UDP
        - containerPort: 10053
          name: dns-tcp-local
          protocol: TCP
        - containerPort: 10055
          name: metrics
          protocol: TCP
        volumeMounts:
        - name: kube-dns-config
          mountPath: /kube-dns-config
      - name: dnsmasq
        image: registry.cn-hangzhou.aliyuncs.com/google_containers/k8s-dns-dnsmasq-nanny-amd64:1.14.7
        livenessProbe:
          httpGet:
            path: /healthcheck/dnsmasq
            port: 10054
            scheme: HTTP
          initialDelaySeconds: 60
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 5
        args:
        - -v=2
        - -logtostderr
        - -configDir=/etc/k8s/dns/dnsmasq-nanny
        - -restartDnsmasq=true
        - --
        - -k
        - --cache-size=1000
        - --no-negcache
        - --log-facility=-
        - --server=/cluster.local/127.0.0.1#10053
        - --server=/in-addr.arpa/127.0.0.1#10053
        - --server=/ip6.arpa/127.0.0.1#10053
        ports:
        - containerPort: 53
          name: dns
          protocol: UDP
        - containerPort: 53
          name: dns-tcp
          protocol: TCP
        # see: https://github.com/kubernetes/kubernetes/issues/29055 for details
        resources:
          requests:
            cpu: 150m
            memory: 20Mi
        volumeMounts:
        - name: kube-dns-config
          mountPath: /etc/k8s/dns/dnsmasq-nanny
      - name: sidecar
        image: registry.cn-hangzhou.aliyuncs.com/google_containers/k8s-dns-sidecar-amd64:1.14.7
        livenessProbe:
          httpGet:
            path: /metrics
            port: 10054
            scheme: HTTP
          initialDelaySeconds: 60
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 5
        args:
        - --v=2
        - --logtostderr
        - --probe=kubedns,127.0.0.1:10053,kubernetes.default.svc.cluster.local,5,SRV
        - --probe=dnsmasq,127.0.0.1:53,kubernetes.default.svc.cluster.local,5,SRV
        ports:
        - containerPort: 10054
          name: metrics
          protocol: TCP
        resources:
          requests:
            memory: 20Mi
            cpu: 10m
      dnsPolicy: Default  # Don't use cluster DNS.
      serviceAccountName: kube-dns

	  
[root@k8s01 kube-dns]# kubectl create -f kube-dns.yaml 
创建


查看状态是否为running
[root@k8s01 kube-dns]# kubectl get all -n kube-system
NAME              DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
deploy/kube-dns   1         1         1            1           3m

NAME                    DESIRED   CURRENT   READY     AGE
rs/kube-dns-9d8b5fb76   1         1         1         3m

NAME              DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
deploy/kube-dns   1         1         1            1           3m

NAME                    DESIRED   CURRENT   READY     AGE
rs/kube-dns-9d8b5fb76   1         1         1         3m

NAME                          READY     STATUS    RESTARTS   AGE
po/kube-dns-9d8b5fb76-tnj8s   3/3       Running   0          3m

NAME           TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)         AGE
svc/kube-dns   ClusterIP   10.1.7.2     <none>        53/UDP,53/TCP   3m


验证dns使用没有问题：

{{ 百度和谷歌大部分都是使用busybox;但是此镜像已经不能使用（原因未知bug）}}
[root@k8s01 kube-dns]# cat nginx-deployment.yaml 
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
    name: my-nginx
spec:
    replicas: 2
    template:
      metadata:
        labels:
          run: my-nginx
      spec:
        containers:
        - name: my-nginx
          image: index.tenxcloud.com/docker_library/nginx
          ports:
          - containerPort: 80

[root@k8s01 kube-dns]# kubectl create -f nginx-deployment.yaml


[root@k8s01 kube-dns]# cat nginx-service.yaml 
apiVersion: v1
kind: Service
metadata:
    name: my-nginx
    labels:
      run: my-nginx
spec:
    ports:
    - port: 80
      protocol: TCP
    selector:
      run: my-nginx
	  
[root@k8s01 kube-dns]# kubectl create -f nginx-service.yaml


[root@k8s01 kube-dns]# cat curl-util.yaml 
apiVersion: v1
kind: Pod
metadata:
    name: curl-util
spec:
    containers:
    - name: curl-util
      image: radial/busyboxplus:curl
      command:
      - sh
      - -c
      - while true; do sleep 1; done
	  
[root@k8s01 kube-dns]# kubectl create -f curl-util.yaml


[root@k8s01 kube-dns]# kubectl get pods -o wide
NAME                        READY     STATUS    RESTARTS   AGE       IP            NODE
curl-util                   1/1       Running   0          4m        172.19.1.3    192.168.2.43
httpd-8576c89d7-9z2d2       1/1       Running   0          2h        172.19.43.2   192.168.2.41
my-nginx-69574dd4ff-6nx59   1/1       Running   0          9m        172.19.22.2   192.168.2.44
my-nginx-69574dd4ff-vtrb2   1/1       Running   0          9m        172.19.43.3   192.168.2.41
nginx-8586cf59-9tk5j        1/1       Running   0          2h        172.19.1.2    192.168.2.43


[root@k8s01 kube-dns]# kubectl exec curl-util -- curl -s my-nginx:80
<!DOCTYPE html>
<html>
<head>
<title>Welcome to nginx!</title>
<style>
    body {
        width: 35em;
        margin: 0 auto;
        font-family: Tahoma, Verdana, Arial, sans-serif;
    }
</style>
</head>
<body>
<h1>Welcome to nginx!</h1>
<p>If you see this page, the nginx web server is successfully installed and
working. Further configuration is required.</p>

<p>For online documentation and support please refer to
<a href="http://nginx.org/">nginx.org</a>.<br/>
Commercial support is available at
<a href="http://nginx.com/">nginx.com</a>.</p>

<p><em>Thank you for using nginx.</em></p>
</body>
</html>

解析成功

[root@k8s01 kube-dns]# kubectl exec curl-util -- nslookup kubernetes.default
Server:    10.1.7.2
Address 1: 10.1.7.2 kube-dns.kube-system.svc.cluster.local

Name:      kubernetes.default
Address 1: 10.1.7.1 kubernetes.default.svc.cluster.local

[root@k8s01 dns-test]# kubectl exec -ti curl-util -- nslookup my-nginx
Server:    10.1.7.2
Address 1: 10.1.7.2 kube-dns.kube-system.svc.cluster.local

Name:      my-nginx
Address 1: 10.1.7.169 my-nginx.default.svc.cluster.local


解析成功 说明部署的dns没有问题

