docker run -ti --entrypoint bash oepnjdk:7-jre   ##会以命令行的方式进入

部署服务：
配置服务:user-thrift-service的application-properties  ##要点：不能写死变量例如ip等

service.name=user-thrift-service
service.port=7911

##数据源的配置
#spring.datasource.url=jdbc:mysql://localhost:3306/db_user
spring.datasource.url=jdbc:mysql://${mysql.address}:3306/db_user

spring.datasource.username=root
spring.datasource.password=aA111111
spring.datasource.driver-class-name=com.mysql.jdbc.Driver


执行man package  会生产jar包

将上述jar包放到docker里
FROM openjdk:7-jre 
COPY target/user-thrift-service-1.0-SNAPSHOT.jar /usr-service.jar 

ENTRYPOINIT ["java", "-jar", "/usr-service.jar"]


build：
docker build -t user-service:latest .

run:
docker run -ti -d --name "user-service" user-service:latest

建立脚本：
#!/bin/bash 
mvn package 
docker build -t user-service:latest .


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

配置服务: message-thrift-python-service

docker pull python:3.6
docker run -ti --entrypoint bash python:3.6

创建Dockerfile.base

FROM python:3.6
RUN pip install thrift 

建立脚本：
#!/bin/bash
docker build -t python-base:latest -f Dockerfile.base .

编写Dockerfile  ##以python-base为基础
FROM python-base:latest 
COPY message /message 

ENTRYPOINT ["python", "/message/message_service.py"]

创建脚本:
#!/bin/bash 
docker build -t message-service:latest .


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

配置服务: user-edge-service 

server.name=user-edge-service
server.port=8082

#thrift.user.ip=127.0.0.1  ##上述已经跑完，是微服务之一；怎么连接呢
thrift.user.ip=user-service  ##为什么上述连接mysql的时候用的外置的变量呢；因为mysql不是此次微服务中的一个服务；而是一个外围的服务（也就是说外围的服务需要用变量来链接；微服务内的服务可以使用服务名来链接）
thirft.port=7911


#thrift.message.ip=127.0.0.1   同上；改为用服务名来链接
thrift.message.ip=message-service  
thrift.message.port=9090

##redis config
#spring.redis.host=localhost   ##同mysql是外围的服务；需要用变量的形式来传进来
spring.redis.host=${redis.address}
spring.redis.port=6379
spring.redis.timeout=30000


##mvn package

dockerfile:
FROM openjdk:7-jre 
COPY target/user-edge-service-1.0-SNAPSHOT.jar /usr-edge-service.jar 
ENTRYPOINIT ["java", "-jar", "/usr-edge-service.jar"]


build:
#!/bin/bash 
mvn package 
docker build -t user-edge-service:latest .

run：
docker run -ti user-edge-service:latest --redis.address=192.168.2.77


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#dubbo配置
spring.dubbo.application.name=course-service 
spring.dubbo.registry.address=zookeeper://127.0.0.1:2181
spring.duubo.protocol.name=dubbo
spring.duubo.protocol.port=20880
spring.duubo.protocol.host=127.0.0.1



===========================================
========================================
上述定义好的微服务之间的通信：
方式：
1.通过ip:port的方式进行通信 使用的很少；因为docker的ip不稳定
2.服务把端口映射出去；用node的ip + port的方式来访问
3.使用docker的link的机制；link到一个容器之后直接使用服务的名字来访问

此时：
我们微服务内的服务间的通信应该使用link的方式来通信而我们的基础服务例如redis；mysql等使用第2种方式来实现

1) 先连接微服务间的各个服务  
2种方式： 1.使用docker-compose    2.docker run的时候加上--link 

[root@harbor01 harbor]# docker run --help |grep -i "link"
      --link list                      Add link to another container
      --link-local-ip list             Container IPv4/IPv6 link-local addresses
	  
	  
1.使用docker-compose
cat docker-compose.yaml
version: "3"
services:
    message-service:
        image: message-service:latest
    user-service:
        image: user-service:latest
        ##因为user-service用到了mysql数据库;所以需要添加command
        command:
        - "--mysql.address=192.168.2.56"  ##ip是本人随意定的；需更改  {{mysql.address这个格式需和上述的数据源的配置格式一样；如果上面用了mysql-address则此处也需要使用mysql-address}}
     user-edge-service:
        image: user-edge-service:latest
		##因为该服务需要连接到如下两个服务；所以添加links指令
        links:
        - user-service
        - message-service
		##同上；该服务需要连接到外围服务redis；所以添加command指令
        command:
        - "--redis.address=192.168.2.19"  ##ip是本人随意定的；需更改
     course-service:
	     image: course-service:latest
		 links:
		 - user-service 
		 command:
		 - "--mysql.address=192.168.2.7"   ##ip是本人随意定的；需更改
		 - "--zookeeper.address=192.168.2.7"   ##ip是本人随意定的；需更改
		 
	 course-edge-service:
	     image: course-edge-service:latest
		 links:
		 - user-edge-service
		 command:
		 - "--zookeeper.address=192.168.2.7"   ##ip是本人随意定的；需更改
		 
	 api-gateway-zuul:
	     image: api-gateway-zuul:latest
		 links:
		 - user-edge-service
		 - course-edge-service
		 ports:     ###因为需要对外提供服务（需要外网访问）；所以定义ports(端口映射)
		 - 8080:8080

启动：
docker-compose up -d 

++++++++++++++++++++++++++++++++++++++++

在一个pod中是怎么访问彼此的?
可以通过127.0.0.1:8055或者localhost:8055来访问彼此

但是这个pod怎么对外提供服务呢:
我们之前学过service；知道我们的服务可以通过cluster-ip或者kube-dns来实现内部访问；而且可以对外提供多个端口；也就是说可以对外提供多个服务

这个服务的入口；入口怎么对外提供服务
需要定义type为nodePort








