[root@k8s01 base]# cat nginx.yaml 
apiVersion: v1
kind: Pod
metadata:
  name: nginx-2
spec:
  initContainers:
  - image: 192.168.2.45:5000/base/index:V4
    name: index
    command: ["cp", "/index.html", "/mnt"]
    volumeMounts:
    - mountPath: /mnt
      name: app-volume
  containers:
  - image: 192.168.2.45:5000/base/nginx:V1
    name: nginx
    volumeMounts:
    - mountPath: /usr/share/nginx/html
      name: app-volume
    ports:
    - containerPort: 80
      hostPort: 8001 
  volumes:
  - name: app-volume
    emptyDir: {}
	

inidex:V4的yaml
[root@k8s01 base]# cat Dockerfile 
FROM 192.168.2.45:5000/base/centos:7.4.1708
ADD index.html /index.html


[root@k8s01 base]# curl http://192.168.2.42:8001
k8s_test01


同理：
如果是部署tomcat的时候
可以将war包在pom里打成镜像，利用initContainer和container相结合地跑起来

但是nodejs呢？
同样，制作nodejs的基础镜像
两个注意点:
1.因为前端项目需要安装，所以需要将项目在本地安装完，然后删除项目，只留下安装后的目录；再进行ADD或者COPY
2.同上需要前端每次将配置文件打包成docker镜像，然后使用initContainer来进行部署上线

此时可以理解为:pod为一个虚拟机，上面跑了两个docker,第一个docker起来之后什么都不做就是将其镜像内部的文件挂载到“虚拟机上”之后给出任意一个运行完成的“”暗示即可（例如执行一句话，例如一个copy命令），然后第二个docker挂载这个文件，并且运行
