一台机器上跑多个站点，即多个域名

nginx默认虚拟主机：
不管什么域名解析到该服务器，都会访问到默认虚拟主机
nginx.conf中的第一个server {}
或listen 80 default_server
泛解析"*.aming.com"

nginx虚拟主机配置规范：
主配置文件include虚拟主机配置文件
在conf目录下创建vhosts目录，在vhost目录下面定义虚拟主机配置

nginx基于端口的虚拟主机
listen端口不同，server_name可以不同

虚拟主机的配置一般做法为在nginx.conf下配置虚拟主机目录即：
在http段中增加一行：
include vhost/*.conf;
同时建议将nginx.conf 中的server给注释掉包含有关500的报错

在conf下创建vhost目录  mkdir ../conf/vhost

在vhost下创建虚拟主机的conf
vi vhost/www.1.com.conf
server {
listen 80;
server_name www.1.com;
root /data/wwwroot/www.1.com;
}

创建1.com的发布目录:
mkdir -p /data/wwwroot/www.1.com
echo "www.1.com" >/data/wwwroot/www.1.com/index.html

##如果对于一个普通的站点来说；上述三行就够足了

+++++++++++++++++++++++++++++++++++++++++++++++++++=

创建第2个虚拟主机：
vi vhost/www.2.com.conf
server {
listen 80;
server_name www.2.com;
root /data/wwwroot/www.2.com;
}

创建2.com的发布目录:
mkdir -p /data/wwwroot/www.2.com
echo "www.2.com" >/data/wwwroot/www.2.com/index.html

重载配置文件nginx -s reload

测试：
curl -x 127.0.0.1:80 www.1.com  ##curl -x可以指定访问的是哪个ip端口和需要访问的域名
[root@localhost vhost]# curl -x 127.0.0.1:80 www.1.com
www.1.com

[root@localhost vhost]# curl -x 127.0.0.1:80 www.2.com
www.2.com

访问没有配置的域名；例如3.com；此时会返回1.com vhost下的第一个
[root@localhost vhost]# curl -x 127.0.0.1:80 www.3.com   
www.1.com

由于这种特性，最好的做法是设定一个默认的虚拟主机来做限制，例如拒绝访问；即：
vi vhost/default.conf
server {
listen 80 default_server;
deny all；
}

重载配置文件
[root@localhost vhost]# nginx -s reload

再次访问没有定义的域名3.com
[root@localhost vhost]# curl -x 127.0.0.1:80 www.3.com
403 Forbidden
nginx/1.6.2

上述server中没有设定index则会默认到指定目录下寻找index.html  若指定了不是index.html则会去访问指定的html：
vi vhost/www.1.com.conf
server {
listen 80;
server_name www.1.com;
index 1.html;
root /data/wwwroot/www.1.com;
}
echo "11111" >/data/wwwroot/www.1.com/1.html

测试：
[root@localhost vhost]# curl -x 127.0.0.1:80 www.1.com
1111    ##此时寻找的不是默认的index.html 而是server中定义好的/data/wwwroot/www.1.com/1.html

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

通常需求：一个域名下有很多个二级虚名例如amingLinux.com下有多个二级域名1.amingLinux.com  2.amingLinux.com  需要将这些二级域名全部解析到这台服务器上；并且让他访问到其中的一个虚拟主机上（不是默认的）；配置如下：
vi vhost/amingLinux.com.conf  
server {
listen 80;
server_name *.aminglinux.com;
root /data/wwwroot/aminglinux.com;
index index.html;
}

mkdir -p /data/wwwroot/aminglinux.com 
echo "aminglinux" >/data/wwwroot/aminglinux.com/index.html

此时直接访问：
[root@localhost vhost]# curl -x 127.0.0.1:80 aminglinux.com
403 Forbidden
nginx/1.6.2

但是在域名aminglinux.com前加前缀的话就可以实现（上述server的域名是泛解析）；例如：
[root@localhost vhost]# curl -x 127.0.0.1:80 1.aminglinux.com
aminglinux
[root@localhost vhost]# curl -x 127.0.0.1:80 2.aminglinux.com
aminglinux
[root@localhost vhost]# curl -x 127.0.0.1:80 aminglinux.com
403 Forbidden
nginx/1.6.2

此时如想将这些二级域名的顶级域名也访问到这台主机；则需修改二级域名的的server_name
vi vhost/amingLinux.com.conf  
server {
listen 80;
server_name aminglinux.com *.aminglinux.com;
root /data/wwwroot/aminglinux.com;
index index.html;
}

重载配置文件访问即：
[root@localhost vhost]# curl -x 127.0.0.1:80 aminglinux.com
aminglinux

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
######################################################################

通常企业需求: 同样的一台机器，我们需要访问不同的端口且域名需要一样;但是访问的目录不一样；即呈现的内容不一样
例如：业务用了2台服务器a,b; 业务域名是www.abc.com;这两台跑的都是nginx；如果想让用户能够访问到a和b的时候（当然可以添加第三台服务c来反向代理a和b;即负载均衡）；但此时若只有a和b两台；则可以将用户访问的域名www.abc.com解析到a服务器上，用a来做负载均衡来反向代理到a和b；但是此时a上已经使用了80端口来跑www.abc.com了；怎么可能再配置一个80端口呢；解决思路：代理的时候用80端口，server的时候代理本地8080端口和服务器b
vi vhost/www.1.com2.conf 
server {
listen 8080;  ##端口不一样；；若此时用80则会报错，注意
server_name www.1.com;   同样的域名
index index.html;
root /data/wwwroot/www.1.com_8080;
}

mkdir -p /data/wwwroot/www.1.com_8080

echo "1.com_8080" >/data/wwwroot/www.1.com_8080/index.html

重载配置文件curl测试：
当配置的端口为80时;会报错如下：
[root@localhost vhost]# nginx -t
nginx: [warn] conflicting server name "www.1.com" on 0.0.0.0:80, ignored
nginx: the configuration file /data/nginx/conf/nginx.conf syntax is ok
nginx: configuration file /data/nginx/conf/nginx.conf test is successful

访问则是之前默认的www.1.com
[root@localhost vhost]# curl -x 127.0.0.1:80 www.1.com
1111

配置端口为8080时：
[root@localhost vhost]# curl -x 127.0.0.1:8080 www.1.com
1.com_8080
