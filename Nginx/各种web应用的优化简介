一，以静态内容为主的web应用

这类应用的一个主要特点是小文件居多，并且读操作频繁，web服务器一般为apache或者nginx，因为两个HTTP服务器对静态资源的处理非常迅速和高效，在web访问量不大时，可以直接对外提供服务，但是有很大并发请求时，单一的web服务器无法支撑大量的客户端访问，此时就需要由多台web服务器组成负载均衡。为了实现更高效的访问，在最前端还可以搭建cache服务器，也就是将静态资源文件缓存到操作系统内存中直接进行读操作，因为直接从内存读取数据要比硬盘读取效率高很多，所以在web前端搭建cache服务器可以大大提高并发访问性能，常用的squid  varnish  

二，以动态内容为主的web应用

这类应用的一个特点是频繁地执行读写操作，例如java php perl CGI等，会导致CPU资源消耗严重，因为动态程序的执行要进行编译、读取数据库等操作，而这些操作都会消耗CPU资源。因此，一个基于动态程序的web应用，应该选择多个性能较高的CPU，这将对系统整体性能的提高有很大帮助
基于动态内容的web应用在高并发访问时，系统执行的进程数会很多，因此要注意负载的分配。由于过多的进程会消耗大量的系统内存，如果内存不足，就会使用虚拟内存，而虚拟内存的增加会导致磁盘写操作的频繁，进而消耗CPU资源，因为要寻找一个硬件资源和软件资源的平衡点，例如配置较大的内存和高性能CPU，而在软件方面可以通过memcached之类的软件加快程序与数据库之间发访问率

三，数据库应用
数据库应用的一个主要特点是消耗内存和磁盘IO，而对于CPU的消耗并不是很大，因此最基本的做法就是为数据库服务器配置较大的内存和读写较快的磁盘阵列。例如可以为数据库服务器的磁盘阵列选择RAID5 RAID01等级别，将web server和DB server分离也是优化数据应用的一个常用做法。如果客户端用户对数据库的请求过大，还可以考虑采取数据库的负载均衡方案，通过软负载均衡或者硬件负载均衡的方式提高数据库访问性能

对数据库中过大的表，可以考虑进行拆分，也就是讲一个大表拆分成多个小表，再通过索引进行管理处理，这样可以避免查询大表造成的性能问题，因为表太大时，查询遍历全表会造成磁盘读操作激增，进而出现读操作等待的情况，同时，数据库中查询语句复杂，大量的where子句，order by, group by排序语句等，容易使CPU出现瓶颈。最后当数据更新时，数据更新量大或者更新频繁，也会造成磁盘写操作激增，出现写操作的瓶颈

在日常应用中，读写分离可以显著提高数据库服务器的性能。

通过缓存方式也可以提高数据库性能，缓存是数据库或对象在内存中的临时容器，使用缓存可大幅减少数据库的读取操作，改由内存来提供数据，在web server和DBserver之间添加缓存 例如memcached


四，软件下载应用
静态资源下载服务器的主要特点是带宽消耗严重，同时对储存性能要求也很高。在下载量极高时，可以采用多台，多点服务器分流的形式分担下载负荷。在HTTP服务器方面，从高性能和减少服务器部署的角度考虑，推荐采用Lighttpd HTTP服务器，而不是采用传统的apache服务器，原因是apache使用阻塞式的I/O操作，性能相对较差，并发能力有限，而Lighttp使用异步IO方式，处理资源下载的并发能力远远超过apache

五，流媒体服务应用
流媒体主要应用在视频会议，视频点播，远程教育，在线直播等方面，这类应用主要的性能瓶颈是网络带宽和储存系统带宽（主要是读操作）。
1.储存方面：需要对视频的编码格式进行优化，进而节省空间，优化储存性能
2.传输方面：可以采用智能流技术控制发送的速率，最大程度地保障用户观看视频的流畅性
3.调度方式：可以采用静态和动态调度结合的方法
4.代理服务器方面：可以采用分段缓存，动态缓存等管理策略；在流媒体体系结构方面，可以采用内存池和线程池技术改善内存消耗和线程过多对性能造成的影响
